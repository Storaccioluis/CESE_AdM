
ASM_EJ5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003530  08003530  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003538  08003538  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000004d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000540  20000540  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ad29  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000d6bb  00000000  00000000  0002adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bd2  00000000  00000000  00038484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000960  00000000  00000000  0003a058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db3cc  00000000  00000000  0003a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000008a8  00000000  00000000  00115d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023af9  00000000  00000000  00116630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a129  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a18  00000000  00000000  0013a17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003464 	.word	0x08003464

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003464 	.word	0x08003464

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_filtroVentana10>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_filtroVentana10:
         push {r3,r4,r5,r6,r7,r8,r9,r10,r11,r12}
 80001f4:	e92d 1ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
         mov r5,r0 			//r5--> direcciÃ³n primer elemento Vin
 80001f8:	4605      	mov	r5, r0
         sub r6,r2,0 		//r6-->TAM-10  --2
 80001fa:	f1a2 0600 	sub.w	r6, r2, #0
         mov r7,0           //r7-->i_index
 80001fe:	f04f 0700 	mov.w	r7, #0
         mov r8,0           //r8-->j_index
 8000202:	f04f 0800 	mov.w	r8, #0
         mov r9,0           //r9-->k_index
 8000206:	f04f 0900 	mov.w	r9, #0
         mov r12,0          //r12--> acum
 800020a:	f04f 0c00 	mov.w	ip, #0
         mov r11,2         //r11--> index j --10
 800020e:	f04f 0b02 	mov.w	fp, #2

08000212 <.asm_filtroVentana10_for_i_index>:



     .asm_filtroVentana10_for_i_index:       //for i_index
          mov r9,0           //r9-->k_index =0
 8000212:	f04f 0900 	mov.w	r9, #0
          mov r10,r7
 8000216:	46ba      	mov	sl, r7

08000218 <.asm_filtroVentana10_for_j_index>:
         .asm_filtroVentana10_for_j_index:   //for j_index
         add r10,r7,r8                       //r10--> i_index + j_index
 8000218:	eb07 0a08 	add.w	sl, r7, r8
         mov r0,r5
 800021c:	4628      	mov	r0, r5
         cmp r10,r6					 //cmp (i_index+j_index)<=r6
 800021e:	45b2      	cmp	sl, r6
         blt .asm_filtroVentana10_menor
 8000220:	db1e      	blt.n	8000260 <.asm_filtroVentana10_menor>

         mov r3,2
 8000222:	f04f 0302 	mov.w	r3, #2
         mul r3,r9,r3
 8000226:	fb09 f303 	mul.w	r3, r9, r3
         add r0,r3
 800022a:	4418      	add	r0, r3
         ldrh r4,[r0]
 800022c:	8804      	ldrh	r4, [r0, #0]
         add r12,r4
 800022e:	44a4      	add	ip, r4
         add r8,1
 8000230:	f108 0801 	add.w	r8, r8, #1
         add r9,1
 8000234:	f109 0901 	add.w	r9, r9, #1
         subs r11,1
 8000238:	f1bb 0b01 	subs.w	fp, fp, #1
         bne .asm_filtroVentana10_for_j_index
 800023c:	d1ec      	bne.n	8000218 <.asm_filtroVentana10_for_j_index>
         mov r3,2                  // 10 --- 2
 800023e:	f04f 0302 	mov.w	r3, #2
         udiv r3,r12,r3
 8000242:	fbbc f3f3 	udiv	r3, ip, r3
         strh r3,[r1],2
 8000246:	f821 3b02 	strh.w	r3, [r1], #2
         mov r12,0
 800024a:	f04f 0c00 	mov.w	ip, #0
         mov r11,2
 800024e:	f04f 0b02 	mov.w	fp, #2
         add r7,1
 8000252:	f107 0701 	add.w	r7, r7, #1
         subs r2,1
 8000256:	3a01      	subs	r2, #1
         bne .asm_filtroVentana10_for_i_index
 8000258:	d1db      	bne.n	8000212 <.asm_filtroVentana10_for_i_index>
         pop {r3,r4,r5,r6,r7,r8,r9,r10,r11,r12}
 800025a:	e8bd 1ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
         bx lr
 800025e:	4770      	bx	lr

08000260 <.asm_filtroVentana10_menor>:

     .asm_filtroVentana10_menor:
         mov r3,2
 8000260:	f04f 0302 	mov.w	r3, #2
         mul r3,r10,r3
 8000264:	fb0a f303 	mul.w	r3, sl, r3
         add r0,r3
 8000268:	4418      	add	r0, r3
         ldrh r4,[r0]
 800026a:	8804      	ldrh	r4, [r0, #0]
         add r12,r4                         //acum + V[i+j]
 800026c:	44a4      	add	ip, r4
         add r8,1
 800026e:	f108 0801 	add.w	r8, r8, #1
         subs r11,1
 8000272:	f1bb 0b01 	subs.w	fp, fp, #1
         bne .asm_filtroVentana10_for_j_index
 8000276:	d1cf      	bne.n	8000218 <.asm_filtroVentana10_for_j_index>
         mov r8,0
 8000278:	f04f 0800 	mov.w	r8, #0
         mov r3,2                // 10 --- 2
 800027c:	f04f 0302 	mov.w	r3, #2
         udiv r3,r12,r3
 8000280:	fbbc f3f3 	udiv	r3, ip, r3
         strh r3,[r1],2
 8000284:	f821 3b02 	strh.w	r3, [r1], #2
         mov r12,0
 8000288:	f04f 0c00 	mov.w	ip, #0
         add r7,1
 800028c:	f107 0701 	add.w	r7, r7, #1
         mov r11,2
 8000290:	f04f 0b02 	mov.w	fp, #2
         subs r2,1
 8000294:	3a01      	subs	r2, #1
         bne .asm_filtroVentana10_for_i_index
 8000296:	d1bc      	bne.n	8000212 <.asm_filtroVentana10_for_i_index>
         pop {r3,r4,r5,r6,r7,r8,r9,r10,r11,r12}
 8000298:	e8bd 1ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
         bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800029c:	4770      	bx	lr

0800029e <strlen>:
 800029e:	4603      	mov	r3, r0
 80002a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a4:	2a00      	cmp	r2, #0
 80002a6:	d1fb      	bne.n	80002a0 <strlen+0x2>
 80002a8:	1a18      	subs	r0, r3, r0
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800064e:	f3ef 8314 	mrs	r3, CONTROL
 8000652:	607b      	str	r3, [r7, #4]
  return(result);
 8000654:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000656:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f383 8814 	msr	CONTROL, r3
}
 800066a:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800066c:	f3ef 8314 	mrs	r3, CONTROL
 8000670:	60fb      	str	r3, [r7, #12]
  return(result);
 8000672:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000674:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	f383 8814 	msr	CONTROL, r3
}
 8000688:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800068a:	f3ef 8314 	mrs	r3, CONTROL
 800068e:	617b      	str	r3, [r7, #20]
  return(result);
 8000690:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000692:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000694:	f7ff fdac 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000698:	f3ef 8314 	mrs	r3, CONTROL
 800069c:	61bb      	str	r3, [r7, #24]
  return(result);
 800069e:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80006a0:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <vPrintString>:

void vPrintString( const char *pcString )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fdf2 	bl	800029e <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	230a      	movs	r3, #10
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4803      	ldr	r0, [pc, #12]	; (80006d0 <vPrintString+0x24>)
 80006c4:	f001 fcc5 	bl	8002052 <HAL_UART_Transmit>


}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000098 	.word	0x20000098

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b0ac      	sub	sp, #176	; 0xb0
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fb9b 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f8bd 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f97d 	bl	80009e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e6:	f000 f923 	bl	8000930 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ea:	f000 f94b 	bl	8000984 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 80006ee:	f7ff ffab 	bl	8000648 <PrivilegiosSVC>

//  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
//  DWT->CYCCNT=0;
  //uint32_t tam=20;
  uint16_t vectorIn[5]={1,2,3,4,5};//,6,7,8,9,10,11,12,13,14,15,16,17,18,19,10};
 80006f2:	4a55      	ldr	r2, [pc, #340]	; (8000848 <main+0x174>)
 80006f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006fa:	c303      	stmia	r3!, {r0, r1}
 80006fc:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOut[5];

  uint16_t vectorIn_C[20]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,10};
 80006fe:	4b53      	ldr	r3, [pc, #332]	; (800084c <main+0x178>)
 8000700:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000712:	e884 0003 	stmia.w	r4, {r0, r1}
  uint16_t vectorOut_C[20];


  asm_filtroVentana10(&vectorIn,&vectorOut,TAM);
 8000716:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800071a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800071e:	2205      	movs	r2, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd67 	bl	80001f4 <asm_filtroVentana10>
  char buffer[50];
for(uint32_t l=0;l<TAM;l++)
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800072c:	e016      	b.n	800075c <main+0x88>
{
  sprintf( buffer, "ASM_vectorOut[%d]:%d#\r\n ",l,vectorOut[l]);
 800072e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000738:	4413      	add	r3, r2
 800073a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800073e:	4638      	mov	r0, r7
 8000740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000744:	4942      	ldr	r1, [pc, #264]	; (8000850 <main+0x17c>)
 8000746:	f002 fa5f 	bl	8002c08 <siprintf>
   	        	                                vPrintString( buffer );
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffad 	bl	80006ac <vPrintString>
for(uint32_t l=0;l<TAM;l++)
 8000752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000756:	3301      	adds	r3, #1
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800075c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000760:	2b04      	cmp	r3, #4
 8000762:	d9e4      	bls.n	800072e <main+0x5a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t i_index;
  uint32_t j_index;
  uint32_t k_index;
  uint32_t acum_c=0;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  for(i_index=0; i_index<TAM;i_index++)
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000770:	e065      	b.n	800083e <main+0x16a>
  {    k_index=0;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  	  for(j_index=0;j_index<10;j_index++)
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800077e:	e031      	b.n	80007e4 <main+0x110>
  	   {   if((i_index+j_index)<=(TAM-10))
 8000780:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000784:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000788:	4413      	add	r3, r2
 800078a:	f113 0f05 	cmn.w	r3, #5
 800078e:	d811      	bhi.n	80007b4 <main+0xe0>
  	          {   acum_c= acum_c+vectorIn_C[i_index+j_index];
 8000790:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000794:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000798:	4413      	add	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80007a0:	4413      	add	r3, r2
 80007a2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80007a6:	461a      	mov	r2, r3
 80007a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007ac:	4413      	add	r3, r2
 80007ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80007b2:	e012      	b.n	80007da <main+0x106>

  	          }
  	       else{acum_c= acum_c+vectorIn_C[k_index];
 80007b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80007be:	4413      	add	r3, r2
 80007c0:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80007c4:	461a      	mov	r2, r3
 80007c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007ca:	4413      	add	r3, r2
 80007cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  	             k_index++;
 80007d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80007d4:	3301      	adds	r3, #1
 80007d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  	  for(j_index=0;j_index<10;j_index++)
 80007da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007de:	3301      	adds	r3, #1
 80007e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007e8:	2b09      	cmp	r3, #9
 80007ea:	d9c9      	bls.n	8000780 <main+0xac>
  	         }

  	   }
  	vectorOut_C[i_index]=acum_c/10;
 80007ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007f0:	4a18      	ldr	r2, [pc, #96]	; (8000854 <main+0x180>)
 80007f2:	fba2 2303 	umull	r2, r3, r2, r3
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000804:	440b      	add	r3, r1
 8000806:	f823 2c7c 	strh.w	r2, [r3, #-124]
  	acum_c=0;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  	 sprintf( buffer, "vectorOut[%d]:%d#\r\n ",i_index,vectorOut_C[i_index]);
 8000810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800081a:	4413      	add	r3, r2
 800081c:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8000820:	4638      	mov	r0, r7
 8000822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <main+0x184>)
 8000828:	f002 f9ee 	bl	8002c08 <siprintf>
  	        	                                vPrintString( buffer );
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff3c 	bl	80006ac <vPrintString>
  for(i_index=0; i_index<TAM;i_index++)
 8000834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000838:	3301      	adds	r3, #1
 800083a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800083e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000842:	2b04      	cmp	r3, #4
 8000844:	d995      	bls.n	8000772 <main+0x9e>
  }


  while (1)
 8000846:	e7fe      	b.n	8000846 <main+0x172>
 8000848:	080034b0 	.word	0x080034b0
 800084c:	080034bc 	.word	0x080034bc
 8000850:	0800347c 	.word	0x0800347c
 8000854:	cccccccd 	.word	0xcccccccd
 8000858:	08003498 	.word	0x08003498

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	; 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2230      	movs	r2, #48	; 0x30
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f002 f9c4 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b28      	ldr	r3, [pc, #160]	; (8000928 <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	4a27      	ldr	r2, [pc, #156]	; (8000928 <SystemClock_Config+0xcc>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <SystemClock_Config+0xd0>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008d0:	23a8      	movs	r3, #168	; 0xa8
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d8:	2307      	movs	r3, #7
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fef5 	bl	80016d0 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ec:	f000 f926 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2105      	movs	r1, #5
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f956 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800091a:	f000 f90f 	bl	8000b3c <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_USART3_UART_Init>:
  * @param None
  * @retval None
  */

static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART3_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000968:	f001 fb26 	bl	8001fb8 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f8e3 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000098 	.word	0x20000098
 8000980:	40004800 	.word	0x40004800

08000984 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2204      	movs	r2, #4
 8000994:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2202      	movs	r2, #2
 800099a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2201      	movs	r2, #1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	f000 fd65 	bl	8001496 <HAL_PCD_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f8b3 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000dc 	.word	0x200000dc

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b4c      	ldr	r3, [pc, #304]	; (8000b2c <MX_GPIO_Init+0x14c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a4b      	ldr	r2, [pc, #300]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a44      	ldr	r2, [pc, #272]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a36      	ldr	r2, [pc, #216]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000aa6:	f000 fcdd 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000ab0:	f000 fcd8 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000acc:	f000 fb1e 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ad0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000aea:	f000 fb0f 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000b06:	f000 fb01 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000b1e:	f000 faf5 	bl	800110c <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020800 	.word	0x40020800

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12c      	bne.n	8000c14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_UART_MspInit+0x8c>)
 8000c10:	f000 fa7c 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c48:	d13f      	bne.n	8000cca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <HAL_PCD_MspInit+0xb0>)
 8000c84:	f000 fa42 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <HAL_PCD_MspInit+0xb0>)
 8000c9e:	f000 fa35 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6353      	str	r3, [r2, #52]	; 0x34
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_PCD_MspInit+0xac>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8c6 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f001 ff20 	bl	8002ba4 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20030000 	.word	0x20030000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	2000008c 	.word	0x2000008c
 8000d98:	20000540 	.word	0x20000540

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f001 fedf 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fc6f 	bl	80006d4 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000df8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e04:	08003540 	.word	0x08003540
  ldr r2, =_sbss
 8000e08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e0c:	20000540 	.word	0x20000540

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f931 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe7e 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f93b 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e94:	f000 f911 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000052c 	.word	0x2000052c

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000052c 	.word	0x2000052c

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff47 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5c 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e177      	b.n	8001418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8166 	bne.w	8001412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80c0 	beq.w	8001412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_GPIO_Init+0x324>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_GPIO_Init+0x324>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a61      	ldr	r2, [pc, #388]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x32c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d037      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_GPIO_Init+0x330>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d031      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a56      	ldr	r2, [pc, #344]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a55      	ldr	r2, [pc, #340]	; (8001444 <HAL_GPIO_Init+0x338>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x232>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x33c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_GPIO_Init+0x340>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x344>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a51      	ldr	r2, [pc, #324]	; (8001454 <HAL_GPIO_Init+0x348>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x34c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x350>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x21a>
 8001322:	2309      	movs	r3, #9
 8001324:	e012      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001326:	230a      	movs	r3, #10
 8001328:	e010      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132a:	2308      	movs	r3, #8
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132e:	2307      	movs	r3, #7
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x240>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x328>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_GPIO_Init+0x354>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138e:	4a34      	ldr	r2, [pc, #208]	; (8001460 <HAL_GPIO_Init+0x354>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <HAL_GPIO_Init+0x354>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_GPIO_Init+0x354>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae84 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40022000 	.word	0x40022000
 800145c:	40022400 	.word	0x40022400
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001498:	b08f      	sub	sp, #60	; 0x3c
 800149a:	af0a      	add	r7, sp, #40	; 0x28
 800149c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e10f      	b.n	80016c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fbb0 	bl	8000c28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2203      	movs	r2, #3
 80014cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f8dd 	bl	80026a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	687e      	ldr	r6, [r7, #4]
 80014f4:	466d      	mov	r5, sp
 80014f6:	f106 0410 	add.w	r4, r6, #16
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001506:	e885 0003 	stmia.w	r5, {r0, r1}
 800150a:	1d33      	adds	r3, r6, #4
 800150c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f001 f868 	bl	80025e4 <USB_CoreInit>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0d0      	b.n	80016c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f001 f8cb 	bl	80026c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e04a      	b.n	80015ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	333d      	adds	r3, #61	; 0x3d
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	333c      	adds	r3, #60	; 0x3c
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	b298      	uxth	r0, r3
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3342      	adds	r3, #66	; 0x42
 8001574:	4602      	mov	r2, r0
 8001576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	333f      	adds	r3, #63	; 0x3f
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3344      	adds	r3, #68	; 0x44
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3348      	adds	r3, #72	; 0x48
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3350      	adds	r3, #80	; 0x50
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	3301      	adds	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3af      	bcc.n	8001538 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e044      	b.n	8001668 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	3301      	adds	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3b5      	bcc.n	80015de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	687e      	ldr	r6, [r7, #4]
 800167a:	466d      	mov	r5, sp
 800167c:	f106 0410 	add.w	r4, r6, #16
 8001680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001690:	1d33      	adds	r3, r6, #4
 8001692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f001 f863 	bl	8002760 <USB_DevInit>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00d      	b.n	80016c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fa0e 	bl	8002ae2 <USB_DevDisconnect>

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e264      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d075      	beq.n	80017da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ee:	4ba3      	ldr	r3, [pc, #652]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d00c      	beq.n	8001714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d112      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001706:	4b9d      	ldr	r3, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001712:	d10b      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d05b      	beq.n	80017d8 <HAL_RCC_OscConfig+0x108>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d157      	bne.n	80017d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e23f      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x74>
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b8b      	ldr	r3, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a8a      	ldr	r2, [pc, #552]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a87      	ldr	r2, [pc, #540]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001768:	4b84      	ldr	r3, [pc, #528]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a83      	ldr	r2, [pc, #524]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b81      	ldr	r3, [pc, #516]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fbaa 	bl	8000ee0 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fba6 	bl	8000ee0 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e204      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0xc0>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb96 	bl	8000ee0 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb92 	bl	8000ee0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1f0      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0xe8>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d063      	beq.n	80018ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d11c      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1c4      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4952      	ldr	r1, [pc, #328]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e03a      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_RCC_OscConfig+0x2b0>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fb4b 	bl	8000ee0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fb47 	bl	8000ee0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a5      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4940      	ldr	r1, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x2b0>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb2a 	bl	8000ee0 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fb26 	bl	8000ee0 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e184      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d030      	beq.n	800191c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_OscConfig+0x2b4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fb0a 	bl	8000ee0 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fb06 	bl	8000ee0 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e164      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x200>
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x2b4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff faf3 	bl	8000ee0 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff faef 	bl	8000ee0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e14d      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a0 	beq.w	8001a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d121      	bne.n	80019aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fab5 	bl	8000ee0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e011      	b.n	800199e <HAL_RCC_OscConfig+0x2ce>
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	42470000 	.word	0x42470000
 8001984:	42470e80 	.word	0x42470e80
 8001988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff faa8 	bl	8000ee0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e106      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_RCC_OscConfig+0x4e4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	e01c      	b.n	80019fa <HAL_RCC_OscConfig+0x32a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019c8:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a77      	ldr	r2, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0x32a>
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a74      	ldr	r2, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
 80019ee:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa6d 	bl	8000ee0 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fa69 	bl	8000ee0 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0c5      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ee      	beq.n	8001a0a <HAL_RCC_OscConfig+0x33a>
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fa57 	bl	8000ee0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fa53 	bl	8000ee0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0af      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a55      	ldr	r2, [pc, #340]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 809b 	beq.w	8001baa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d05c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d141      	bne.n	8001b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fa27 	bl	8000ee0 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fa23 	bl	8000ee0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e081      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	019b      	lsls	r3, r3, #6
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	3b01      	subs	r3, #1
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
 8001ad8:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f9fc 	bl	8000ee0 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f9f8 	bl	8000ee0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e056      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x41c>
 8001b0a:	e04e      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f9e5 	bl	8000ee0 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f9e1 	bl	8000ee0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e03f      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x44a>
 8001b38:	e037      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e032      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d028      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d11a      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d111      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470060 	.word	0x42470060

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cc      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d044      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e067      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4934      	ldr	r1, [pc, #208]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f916 	bl	8000ee0 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff f912 	bl	8000ee0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d20c      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f876 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	080034e4 	.word	0x080034e4
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00d      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f200 80bd 	bhi.w	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dbe:	e0b7      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dc2:	60bb      	str	r3, [r7, #8]
       break;
 8001dc4:	e0b7      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dc8:	60bb      	str	r3, [r7, #8]
      break;
 8001dca:	e0b4      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d04d      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	ea02 0800 	and.w	r8, r2, r0
 8001dfa:	ea03 0901 	and.w	r9, r3, r1
 8001dfe:	4640      	mov	r0, r8
 8001e00:	4649      	mov	r1, r9
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	014b      	lsls	r3, r1, #5
 8001e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e10:	0142      	lsls	r2, r0, #5
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	ebb0 0008 	subs.w	r0, r0, r8
 8001e1a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2c:	0182      	lsls	r2, r0, #6
 8001e2e:	1a12      	subs	r2, r2, r0
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	00d9      	lsls	r1, r3, #3
 8001e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e42:	00d0      	lsls	r0, r2, #3
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	eb12 0208 	adds.w	r2, r2, r8
 8001e4c:	eb43 0309 	adc.w	r3, r3, r9
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0259      	lsls	r1, r3, #9
 8001e5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e5e:	0250      	lsls	r0, r2, #9
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe fa6e 	bl	8000350 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e04a      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	461a      	mov	r2, r3
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	ea02 0400 	and.w	r4, r2, r0
 8001e96:	ea03 0501 	and.w	r5, r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	014b      	lsls	r3, r1, #5
 8001ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eac:	0142      	lsls	r2, r0, #5
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	1b00      	subs	r0, r0, r4
 8001eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	018b      	lsls	r3, r1, #6
 8001ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec6:	0182      	lsls	r2, r0, #6
 8001ec8:	1a12      	subs	r2, r2, r0
 8001eca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	00d9      	lsls	r1, r3, #3
 8001ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001edc:	00d0      	lsls	r0, r2, #3
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	1912      	adds	r2, r2, r4
 8001ee4:	eb45 0303 	adc.w	r3, r5, r3
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0299      	lsls	r1, r3, #10
 8001ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef6:	0290      	lsls	r0, r2, #10
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f7fe fa22 	bl	8000350 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f32:	60bb      	str	r3, [r7, #8]
      break;
 8001f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f36:	68bb      	ldr	r3, [r7, #8]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	080034f4 	.word	0x080034f4

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffdc 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	080034f4 	.word	0x080034f4

08001fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03f      	b.n	800204a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fdda 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f929 	bl	8002254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b08a      	sub	sp, #40	; 0x28
 8002056:	af02      	add	r7, sp, #8
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	d17c      	bne.n	800216c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_UART_Transmit+0x2c>
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e075      	b.n	800216e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_UART_Transmit+0x3e>
 800208c:	2302      	movs	r3, #2
 800208e:	e06e      	b.n	800216e <HAL_UART_Transmit+0x11c>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2221      	movs	r2, #33	; 0x21
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020a6:	f7fe ff1b 	bl	8000ee0 <HAL_GetTick>
 80020aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c0:	d108      	bne.n	80020d4 <HAL_UART_Transmit+0x82>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d104      	bne.n	80020d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e003      	b.n	80020dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020e4:	e02a      	b.n	800213c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f840 	bl	8002176 <UART_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e036      	b.n	800216e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10b      	bne.n	800211e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3302      	adds	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e007      	b.n	800212e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1cf      	bne.n	80020e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	2140      	movs	r1, #64	; 0x40
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f810 	bl	8002176 <UART_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b090      	sub	sp, #64	; 0x40
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002186:	e050      	b.n	800222a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d04c      	beq.n	800222a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002196:	f7fe fea3 	bl	8000ee0 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d241      	bcs.n	800222a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	e853 3f00 	ldrex	r3, [r3]
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	330c      	adds	r3, #12
 80021c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c6:	637a      	str	r2, [r7, #52]	; 0x34
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e5      	bne.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	613b      	str	r3, [r7, #16]
   return(result);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021fa:	623a      	str	r2, [r7, #32]
 80021fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fe:	69f9      	ldr	r1, [r7, #28]
 8002200:	6a3a      	ldr	r2, [r7, #32]
 8002202:	e841 2300 	strex	r3, r2, [r1]
 8002206:	61bb      	str	r3, [r7, #24]
   return(result);
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1e5      	bne.n	80021da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e00f      	b.n	800224a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d09f      	beq.n	8002188 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3740      	adds	r7, #64	; 0x40
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002258:	b09f      	sub	sp, #124	; 0x7c
 800225a:	af00      	add	r7, sp, #0
 800225c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	ea40 0301 	orr.w	r3, r0, r1
 8002274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	431a      	orrs	r2, r3
 8002286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4313      	orrs	r3, r2
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800228e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002298:	f021 010c 	bic.w	r1, r1, #12
 800229c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022a2:	430b      	orrs	r3, r1
 80022a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b2:	6999      	ldr	r1, [r3, #24]
 80022b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	ea40 0301 	orr.w	r3, r0, r1
 80022bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4bc5      	ldr	r3, [pc, #788]	; (80025d8 <UART_SetConfig+0x384>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d004      	beq.n	80022d2 <UART_SetConfig+0x7e>
 80022c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4bc3      	ldr	r3, [pc, #780]	; (80025dc <UART_SetConfig+0x388>)
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d103      	bne.n	80022da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d2:	f7ff fe5d 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80022d6:	6778      	str	r0, [r7, #116]	; 0x74
 80022d8:	e002      	b.n	80022e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022da:	f7ff fe45 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80022de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e8:	f040 80b6 	bne.w	8002458 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ee:	461c      	mov	r4, r3
 80022f0:	f04f 0500 	mov.w	r5, #0
 80022f4:	4622      	mov	r2, r4
 80022f6:	462b      	mov	r3, r5
 80022f8:	1891      	adds	r1, r2, r2
 80022fa:	6439      	str	r1, [r7, #64]	; 0x40
 80022fc:	415b      	adcs	r3, r3
 80022fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002300:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002304:	1912      	adds	r2, r2, r4
 8002306:	eb45 0303 	adc.w	r3, r5, r3
 800230a:	f04f 0000 	mov.w	r0, #0
 800230e:	f04f 0100 	mov.w	r1, #0
 8002312:	00d9      	lsls	r1, r3, #3
 8002314:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002318:	00d0      	lsls	r0, r2, #3
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	1911      	adds	r1, r2, r4
 8002320:	6639      	str	r1, [r7, #96]	; 0x60
 8002322:	416b      	adcs	r3, r5
 8002324:	667b      	str	r3, [r7, #100]	; 0x64
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	461a      	mov	r2, r3
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	1891      	adds	r1, r2, r2
 8002332:	63b9      	str	r1, [r7, #56]	; 0x38
 8002334:	415b      	adcs	r3, r3
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800233c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002340:	f7fe f806 	bl	8000350 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4ba5      	ldr	r3, [pc, #660]	; (80025e0 <UART_SetConfig+0x38c>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	011e      	lsls	r6, r3, #4
 8002352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002354:	461c      	mov	r4, r3
 8002356:	f04f 0500 	mov.w	r5, #0
 800235a:	4622      	mov	r2, r4
 800235c:	462b      	mov	r3, r5
 800235e:	1891      	adds	r1, r2, r2
 8002360:	6339      	str	r1, [r7, #48]	; 0x30
 8002362:	415b      	adcs	r3, r3
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
 8002366:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800236a:	1912      	adds	r2, r2, r4
 800236c:	eb45 0303 	adc.w	r3, r5, r3
 8002370:	f04f 0000 	mov.w	r0, #0
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	00d9      	lsls	r1, r3, #3
 800237a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800237e:	00d0      	lsls	r0, r2, #3
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	1911      	adds	r1, r2, r4
 8002386:	65b9      	str	r1, [r7, #88]	; 0x58
 8002388:	416b      	adcs	r3, r5
 800238a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	461a      	mov	r2, r3
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	1891      	adds	r1, r2, r2
 8002398:	62b9      	str	r1, [r7, #40]	; 0x28
 800239a:	415b      	adcs	r3, r3
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80023a6:	f7fd ffd3 	bl	8000350 <__aeabi_uldivmod>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4b8c      	ldr	r3, [pc, #560]	; (80025e0 <UART_SetConfig+0x38c>)
 80023b0:	fba3 1302 	umull	r1, r3, r3, r2
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	2164      	movs	r1, #100	; 0x64
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	3332      	adds	r3, #50	; 0x32
 80023c2:	4a87      	ldr	r2, [pc, #540]	; (80025e0 <UART_SetConfig+0x38c>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023d0:	441e      	add	r6, r3
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	4618      	mov	r0, r3
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	1894      	adds	r4, r2, r2
 80023e0:	623c      	str	r4, [r7, #32]
 80023e2:	415b      	adcs	r3, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ea:	1812      	adds	r2, r2, r0
 80023ec:	eb41 0303 	adc.w	r3, r1, r3
 80023f0:	f04f 0400 	mov.w	r4, #0
 80023f4:	f04f 0500 	mov.w	r5, #0
 80023f8:	00dd      	lsls	r5, r3, #3
 80023fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023fe:	00d4      	lsls	r4, r2, #3
 8002400:	4622      	mov	r2, r4
 8002402:	462b      	mov	r3, r5
 8002404:	1814      	adds	r4, r2, r0
 8002406:	653c      	str	r4, [r7, #80]	; 0x50
 8002408:	414b      	adcs	r3, r1
 800240a:	657b      	str	r3, [r7, #84]	; 0x54
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	461a      	mov	r2, r3
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	1891      	adds	r1, r2, r2
 8002418:	61b9      	str	r1, [r7, #24]
 800241a:	415b      	adcs	r3, r3
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002422:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002426:	f7fd ff93 	bl	8000350 <__aeabi_uldivmod>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4b6c      	ldr	r3, [pc, #432]	; (80025e0 <UART_SetConfig+0x38c>)
 8002430:	fba3 1302 	umull	r1, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	2164      	movs	r1, #100	; 0x64
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	4a67      	ldr	r2, [pc, #412]	; (80025e0 <UART_SetConfig+0x38c>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	f003 0207 	and.w	r2, r3, #7
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4432      	add	r2, r6
 8002454:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002456:	e0b9      	b.n	80025cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	461c      	mov	r4, r3
 800245c:	f04f 0500 	mov.w	r5, #0
 8002460:	4622      	mov	r2, r4
 8002462:	462b      	mov	r3, r5
 8002464:	1891      	adds	r1, r2, r2
 8002466:	6139      	str	r1, [r7, #16]
 8002468:	415b      	adcs	r3, r3
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002470:	1912      	adds	r2, r2, r4
 8002472:	eb45 0303 	adc.w	r3, r5, r3
 8002476:	f04f 0000 	mov.w	r0, #0
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	00d9      	lsls	r1, r3, #3
 8002480:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002484:	00d0      	lsls	r0, r2, #3
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	eb12 0804 	adds.w	r8, r2, r4
 800248e:	eb43 0905 	adc.w	r9, r3, r5
 8002492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	008b      	lsls	r3, r1, #2
 80024a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024aa:	0082      	lsls	r2, r0, #2
 80024ac:	4640      	mov	r0, r8
 80024ae:	4649      	mov	r1, r9
 80024b0:	f7fd ff4e 	bl	8000350 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <UART_SetConfig+0x38c>)
 80024ba:	fba3 2302 	umull	r2, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	011e      	lsls	r6, r3, #4
 80024c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c4:	4618      	mov	r0, r3
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	1894      	adds	r4, r2, r2
 80024d0:	60bc      	str	r4, [r7, #8]
 80024d2:	415b      	adcs	r3, r3
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024da:	1812      	adds	r2, r2, r0
 80024dc:	eb41 0303 	adc.w	r3, r1, r3
 80024e0:	f04f 0400 	mov.w	r4, #0
 80024e4:	f04f 0500 	mov.w	r5, #0
 80024e8:	00dd      	lsls	r5, r3, #3
 80024ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024ee:	00d4      	lsls	r4, r2, #3
 80024f0:	4622      	mov	r2, r4
 80024f2:	462b      	mov	r3, r5
 80024f4:	1814      	adds	r4, r2, r0
 80024f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80024f8:	414b      	adcs	r3, r1
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	008b      	lsls	r3, r1, #2
 8002510:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002514:	0082      	lsls	r2, r0, #2
 8002516:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800251a:	f7fd ff19 	bl	8000350 <__aeabi_uldivmod>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <UART_SetConfig+0x38c>)
 8002524:	fba3 1302 	umull	r1, r3, r3, r2
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	2164      	movs	r1, #100	; 0x64
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	3332      	adds	r3, #50	; 0x32
 8002536:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <UART_SetConfig+0x38c>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002542:	441e      	add	r6, r3
 8002544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002546:	4618      	mov	r0, r3
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	1894      	adds	r4, r2, r2
 8002552:	603c      	str	r4, [r7, #0]
 8002554:	415b      	adcs	r3, r3
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800255c:	1812      	adds	r2, r2, r0
 800255e:	eb41 0303 	adc.w	r3, r1, r3
 8002562:	f04f 0400 	mov.w	r4, #0
 8002566:	f04f 0500 	mov.w	r5, #0
 800256a:	00dd      	lsls	r5, r3, #3
 800256c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002570:	00d4      	lsls	r4, r2, #3
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	eb12 0a00 	adds.w	sl, r2, r0
 800257a:	eb43 0b01 	adc.w	fp, r3, r1
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4618      	mov	r0, r3
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	008b      	lsls	r3, r1, #2
 8002592:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002596:	0082      	lsls	r2, r0, #2
 8002598:	4650      	mov	r0, sl
 800259a:	4659      	mov	r1, fp
 800259c:	f7fd fed8 	bl	8000350 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <UART_SetConfig+0x38c>)
 80025a6:	fba3 1302 	umull	r1, r3, r3, r2
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2164      	movs	r1, #100	; 0x64
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	3332      	adds	r3, #50	; 0x32
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <UART_SetConfig+0x38c>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4432      	add	r2, r6
 80025ca:	609a      	str	r2, [r3, #8]
}
 80025cc:	bf00      	nop
 80025ce:	377c      	adds	r7, #124	; 0x7c
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d6:	bf00      	nop
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40011400 	.word	0x40011400
 80025e0:	51eb851f 	.word	0x51eb851f

080025e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80025e4:	b084      	sub	sp, #16
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	f107 001c 	add.w	r0, r7, #28
 80025f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d122      	bne.n	8002642 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa82 	bl	8002b40 <USB_CoreReset>
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e01a      	b.n	8002678 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa76 	bl	8002b40 <USB_CoreReset>
 8002654:	4603      	mov	r3, r0
 8002656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
 800266a:	e005      	b.n	8002678 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10b      	bne.n	8002696 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f043 0206 	orr.w	r2, r3, #6
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026a2:	b004      	add	sp, #16
 80026a4:	4770      	bx	lr

080026a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0201 	bic.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d115      	bne.n	8002716 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f7fe fbfe 	bl	8000ef8 <HAL_Delay>
      ms++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa0e 	bl	8002b24 <USB_GetMode>
 8002708:	4603      	mov	r3, r0
 800270a:	2b01      	cmp	r3, #1
 800270c:	d01e      	beq.n	800274c <USB_SetCurrentMode+0x84>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b31      	cmp	r3, #49	; 0x31
 8002712:	d9f0      	bls.n	80026f6 <USB_SetCurrentMode+0x2e>
 8002714:	e01a      	b.n	800274c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d115      	bne.n	8002748 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002728:	2001      	movs	r0, #1
 800272a:	f7fe fbe5 	bl	8000ef8 <HAL_Delay>
      ms++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f9f5 	bl	8002b24 <USB_GetMode>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <USB_SetCurrentMode+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b31      	cmp	r3, #49	; 0x31
 8002744:	d9f0      	bls.n	8002728 <USB_SetCurrentMode+0x60>
 8002746:	e001      	b.n	800274c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e005      	b.n	8002758 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b32      	cmp	r3, #50	; 0x32
 8002750:	d101      	bne.n	8002756 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002760:	b084      	sub	sp, #16
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800276e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e009      	b.n	8002794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3340      	adds	r3, #64	; 0x40
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b0e      	cmp	r3, #14
 8002798:	d9f2      	bls.n	8002780 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800279a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11c      	bne.n	80027da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
 80027d8:	e00b      	b.n	80027f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80027f8:	461a      	mov	r2, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002804:	4619      	mov	r1, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	461a      	mov	r2, r3
 800280e:	680b      	ldr	r3, [r1, #0]
 8002810:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800281e:	2100      	movs	r1, #0
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f945 	bl	8002ab0 <USB_SetDevSpeed>
 8002826:	e008      	b.n	800283a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002828:	2101      	movs	r1, #1
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f940 	bl	8002ab0 <USB_SetDevSpeed>
 8002830:	e003      	b.n	800283a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002832:	2103      	movs	r1, #3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f93b 	bl	8002ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800283a:	2110      	movs	r1, #16
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f8f3 	bl	8002a28 <USB_FlushTxFifo>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f90f 	bl	8002a70 <USB_FlushRxFifo>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	461a      	mov	r2, r3
 8002864:	2300      	movs	r3, #0
 8002866:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287a:	461a      	mov	r2, r3
 800287c:	2300      	movs	r3, #0
 800287e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e043      	b.n	800290e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800289c:	d118      	bne.n	80028d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e013      	b.n	80028e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c6:	461a      	mov	r2, r3
 80028c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e008      	b.n	80028e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028dc:	461a      	mov	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ee:	461a      	mov	r2, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002900:	461a      	mov	r2, r3
 8002902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3301      	adds	r3, #1
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d3b7      	bcc.n	8002886 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e043      	b.n	80029a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800292e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002932:	d118      	bne.n	8002966 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002946:	461a      	mov	r2, r3
 8002948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e013      	b.n	8002978 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	461a      	mov	r2, r3
 800295e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e008      	b.n	8002978 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	461a      	mov	r2, r3
 8002974:	2300      	movs	r3, #0
 8002976:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	461a      	mov	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002996:	461a      	mov	r2, r3
 8002998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800299c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3301      	adds	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3b7      	bcc.n	800291c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80029cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <USB_DevInit+0x2c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80029ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f043 0208 	orr.w	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80029fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a20:	b004      	add	sp, #16
 8002a22:	4770      	bx	lr
 8002a24:	803c3800 	.word	0x803c3800

08002a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <USB_FlushTxFifo+0x44>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e006      	b.n	8002a60 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d0f1      	beq.n	8002a42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	00030d40 	.word	0x00030d40

08002a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	4a08      	ldr	r2, [pc, #32]	; (8002aac <USB_FlushRxFifo+0x3c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e006      	b.n	8002aa0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d0f1      	beq.n	8002a82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	00030d40 	.word	0x00030d40

08002ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002afc:	f023 0303 	bic.w	r3, r3, #3
 8002b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0301 	and.w	r3, r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <USB_CoreReset+0x60>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e01a      	b.n	8002b92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	daf3      	bge.n	8002b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <USB_CoreReset+0x60>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d0f1      	beq.n	8002b74 <USB_CoreReset+0x34>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	00030d40 	.word	0x00030d40

08002ba4 <__errno>:
 8002ba4:	4b01      	ldr	r3, [pc, #4]	; (8002bac <__errno+0x8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	2000000c 	.word	0x2000000c

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4d0d      	ldr	r5, [pc, #52]	; (8002be8 <__libc_init_array+0x38>)
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	2600      	movs	r6, #0
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	4d0b      	ldr	r5, [pc, #44]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc2:	4c0c      	ldr	r4, [pc, #48]	; (8002bf4 <__libc_init_array+0x44>)
 8002bc4:	f000 fc4e 	bl	8003464 <_init>
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	2600      	movs	r6, #0
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08003538 	.word	0x08003538
 8002bec:	08003538 	.word	0x08003538
 8002bf0:	08003538 	.word	0x08003538
 8002bf4:	0800353c 	.word	0x0800353c

08002bf8 <memset>:
 8002bf8:	4402      	add	r2, r0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	f803 1b01 	strb.w	r1, [r3], #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <siprintf>:
 8002c08:	b40e      	push	{r1, r2, r3}
 8002c0a:	b500      	push	{lr}
 8002c0c:	b09c      	sub	sp, #112	; 0x70
 8002c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c10:	9002      	str	r0, [sp, #8]
 8002c12:	9006      	str	r0, [sp, #24]
 8002c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c18:	4809      	ldr	r0, [pc, #36]	; (8002c40 <siprintf+0x38>)
 8002c1a:	9107      	str	r1, [sp, #28]
 8002c1c:	9104      	str	r1, [sp, #16]
 8002c1e:	4909      	ldr	r1, [pc, #36]	; (8002c44 <siprintf+0x3c>)
 8002c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c24:	9105      	str	r1, [sp, #20]
 8002c26:	6800      	ldr	r0, [r0, #0]
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	a902      	add	r1, sp, #8
 8002c2c:	f000 f868 	bl	8002d00 <_svfiprintf_r>
 8002c30:	9b02      	ldr	r3, [sp, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	b01c      	add	sp, #112	; 0x70
 8002c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c3c:	b003      	add	sp, #12
 8002c3e:	4770      	bx	lr
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	ffff0208 	.word	0xffff0208

08002c48 <__ssputs_r>:
 8002c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4c:	688e      	ldr	r6, [r1, #8]
 8002c4e:	429e      	cmp	r6, r3
 8002c50:	4682      	mov	sl, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	4690      	mov	r8, r2
 8002c56:	461f      	mov	r7, r3
 8002c58:	d838      	bhi.n	8002ccc <__ssputs_r+0x84>
 8002c5a:	898a      	ldrh	r2, [r1, #12]
 8002c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c60:	d032      	beq.n	8002cc8 <__ssputs_r+0x80>
 8002c62:	6825      	ldr	r5, [r4, #0]
 8002c64:	6909      	ldr	r1, [r1, #16]
 8002c66:	eba5 0901 	sub.w	r9, r5, r1
 8002c6a:	6965      	ldr	r5, [r4, #20]
 8002c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c74:	3301      	adds	r3, #1
 8002c76:	444b      	add	r3, r9
 8002c78:	106d      	asrs	r5, r5, #1
 8002c7a:	429d      	cmp	r5, r3
 8002c7c:	bf38      	it	cc
 8002c7e:	461d      	movcc	r5, r3
 8002c80:	0553      	lsls	r3, r2, #21
 8002c82:	d531      	bpl.n	8002ce8 <__ssputs_r+0xa0>
 8002c84:	4629      	mov	r1, r5
 8002c86:	f000 fb47 	bl	8003318 <_malloc_r>
 8002c8a:	4606      	mov	r6, r0
 8002c8c:	b950      	cbnz	r0, 8002ca4 <__ssputs_r+0x5c>
 8002c8e:	230c      	movs	r3, #12
 8002c90:	f8ca 3000 	str.w	r3, [sl]
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9a:	81a3      	strh	r3, [r4, #12]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	464a      	mov	r2, r9
 8002ca8:	f000 fabe 	bl	8003228 <memcpy>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	6126      	str	r6, [r4, #16]
 8002cba:	6165      	str	r5, [r4, #20]
 8002cbc:	444e      	add	r6, r9
 8002cbe:	eba5 0509 	sub.w	r5, r5, r9
 8002cc2:	6026      	str	r6, [r4, #0]
 8002cc4:	60a5      	str	r5, [r4, #8]
 8002cc6:	463e      	mov	r6, r7
 8002cc8:	42be      	cmp	r6, r7
 8002cca:	d900      	bls.n	8002cce <__ssputs_r+0x86>
 8002ccc:	463e      	mov	r6, r7
 8002cce:	4632      	mov	r2, r6
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	f000 fab6 	bl	8003244 <memmove>
 8002cd8:	68a3      	ldr	r3, [r4, #8]
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	1b9b      	subs	r3, r3, r6
 8002cde:	4432      	add	r2, r6
 8002ce0:	60a3      	str	r3, [r4, #8]
 8002ce2:	6022      	str	r2, [r4, #0]
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e7db      	b.n	8002ca0 <__ssputs_r+0x58>
 8002ce8:	462a      	mov	r2, r5
 8002cea:	f000 fb6f 	bl	80033cc <_realloc_r>
 8002cee:	4606      	mov	r6, r0
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d1e1      	bne.n	8002cb8 <__ssputs_r+0x70>
 8002cf4:	6921      	ldr	r1, [r4, #16]
 8002cf6:	4650      	mov	r0, sl
 8002cf8:	f000 fabe 	bl	8003278 <_free_r>
 8002cfc:	e7c7      	b.n	8002c8e <__ssputs_r+0x46>
	...

08002d00 <_svfiprintf_r>:
 8002d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d04:	4698      	mov	r8, r3
 8002d06:	898b      	ldrh	r3, [r1, #12]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	b09d      	sub	sp, #116	; 0x74
 8002d0c:	4607      	mov	r7, r0
 8002d0e:	460d      	mov	r5, r1
 8002d10:	4614      	mov	r4, r2
 8002d12:	d50e      	bpl.n	8002d32 <_svfiprintf_r+0x32>
 8002d14:	690b      	ldr	r3, [r1, #16]
 8002d16:	b963      	cbnz	r3, 8002d32 <_svfiprintf_r+0x32>
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	f000 fafd 	bl	8003318 <_malloc_r>
 8002d1e:	6028      	str	r0, [r5, #0]
 8002d20:	6128      	str	r0, [r5, #16]
 8002d22:	b920      	cbnz	r0, 8002d2e <_svfiprintf_r+0x2e>
 8002d24:	230c      	movs	r3, #12
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d2c:	e0d1      	b.n	8002ed2 <_svfiprintf_r+0x1d2>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	616b      	str	r3, [r5, #20]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9309      	str	r3, [sp, #36]	; 0x24
 8002d36:	2320      	movs	r3, #32
 8002d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d40:	2330      	movs	r3, #48	; 0x30
 8002d42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002eec <_svfiprintf_r+0x1ec>
 8002d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d4a:	f04f 0901 	mov.w	r9, #1
 8002d4e:	4623      	mov	r3, r4
 8002d50:	469a      	mov	sl, r3
 8002d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d56:	b10a      	cbz	r2, 8002d5c <_svfiprintf_r+0x5c>
 8002d58:	2a25      	cmp	r2, #37	; 0x25
 8002d5a:	d1f9      	bne.n	8002d50 <_svfiprintf_r+0x50>
 8002d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d60:	d00b      	beq.n	8002d7a <_svfiprintf_r+0x7a>
 8002d62:	465b      	mov	r3, fp
 8002d64:	4622      	mov	r2, r4
 8002d66:	4629      	mov	r1, r5
 8002d68:	4638      	mov	r0, r7
 8002d6a:	f7ff ff6d 	bl	8002c48 <__ssputs_r>
 8002d6e:	3001      	adds	r0, #1
 8002d70:	f000 80aa 	beq.w	8002ec8 <_svfiprintf_r+0x1c8>
 8002d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d76:	445a      	add	r2, fp
 8002d78:	9209      	str	r2, [sp, #36]	; 0x24
 8002d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a2 	beq.w	8002ec8 <_svfiprintf_r+0x1c8>
 8002d84:	2300      	movs	r3, #0
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d8e:	f10a 0a01 	add.w	sl, sl, #1
 8002d92:	9304      	str	r3, [sp, #16]
 8002d94:	9307      	str	r3, [sp, #28]
 8002d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d9c:	4654      	mov	r4, sl
 8002d9e:	2205      	movs	r2, #5
 8002da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da4:	4851      	ldr	r0, [pc, #324]	; (8002eec <_svfiprintf_r+0x1ec>)
 8002da6:	f7fd fa83 	bl	80002b0 <memchr>
 8002daa:	9a04      	ldr	r2, [sp, #16]
 8002dac:	b9d8      	cbnz	r0, 8002de6 <_svfiprintf_r+0xe6>
 8002dae:	06d0      	lsls	r0, r2, #27
 8002db0:	bf44      	itt	mi
 8002db2:	2320      	movmi	r3, #32
 8002db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002db8:	0711      	lsls	r1, r2, #28
 8002dba:	bf44      	itt	mi
 8002dbc:	232b      	movmi	r3, #43	; 0x2b
 8002dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8002dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc8:	d015      	beq.n	8002df6 <_svfiprintf_r+0xf6>
 8002dca:	9a07      	ldr	r2, [sp, #28]
 8002dcc:	4654      	mov	r4, sl
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f04f 0c0a 	mov.w	ip, #10
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dda:	3b30      	subs	r3, #48	; 0x30
 8002ddc:	2b09      	cmp	r3, #9
 8002dde:	d94e      	bls.n	8002e7e <_svfiprintf_r+0x17e>
 8002de0:	b1b0      	cbz	r0, 8002e10 <_svfiprintf_r+0x110>
 8002de2:	9207      	str	r2, [sp, #28]
 8002de4:	e014      	b.n	8002e10 <_svfiprintf_r+0x110>
 8002de6:	eba0 0308 	sub.w	r3, r0, r8
 8002dea:	fa09 f303 	lsl.w	r3, r9, r3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	9304      	str	r3, [sp, #16]
 8002df2:	46a2      	mov	sl, r4
 8002df4:	e7d2      	b.n	8002d9c <_svfiprintf_r+0x9c>
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	1d19      	adds	r1, r3, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	9103      	str	r1, [sp, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bfbb      	ittet	lt
 8002e02:	425b      	neglt	r3, r3
 8002e04:	f042 0202 	orrlt.w	r2, r2, #2
 8002e08:	9307      	strge	r3, [sp, #28]
 8002e0a:	9307      	strlt	r3, [sp, #28]
 8002e0c:	bfb8      	it	lt
 8002e0e:	9204      	strlt	r2, [sp, #16]
 8002e10:	7823      	ldrb	r3, [r4, #0]
 8002e12:	2b2e      	cmp	r3, #46	; 0x2e
 8002e14:	d10c      	bne.n	8002e30 <_svfiprintf_r+0x130>
 8002e16:	7863      	ldrb	r3, [r4, #1]
 8002e18:	2b2a      	cmp	r3, #42	; 0x2a
 8002e1a:	d135      	bne.n	8002e88 <_svfiprintf_r+0x188>
 8002e1c:	9b03      	ldr	r3, [sp, #12]
 8002e1e:	1d1a      	adds	r2, r3, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	9203      	str	r2, [sp, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bfb8      	it	lt
 8002e28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e2c:	3402      	adds	r4, #2
 8002e2e:	9305      	str	r3, [sp, #20]
 8002e30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002efc <_svfiprintf_r+0x1fc>
 8002e34:	7821      	ldrb	r1, [r4, #0]
 8002e36:	2203      	movs	r2, #3
 8002e38:	4650      	mov	r0, sl
 8002e3a:	f7fd fa39 	bl	80002b0 <memchr>
 8002e3e:	b140      	cbz	r0, 8002e52 <_svfiprintf_r+0x152>
 8002e40:	2340      	movs	r3, #64	; 0x40
 8002e42:	eba0 000a 	sub.w	r0, r0, sl
 8002e46:	fa03 f000 	lsl.w	r0, r3, r0
 8002e4a:	9b04      	ldr	r3, [sp, #16]
 8002e4c:	4303      	orrs	r3, r0
 8002e4e:	3401      	adds	r4, #1
 8002e50:	9304      	str	r3, [sp, #16]
 8002e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e56:	4826      	ldr	r0, [pc, #152]	; (8002ef0 <_svfiprintf_r+0x1f0>)
 8002e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e5c:	2206      	movs	r2, #6
 8002e5e:	f7fd fa27 	bl	80002b0 <memchr>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d038      	beq.n	8002ed8 <_svfiprintf_r+0x1d8>
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <_svfiprintf_r+0x1f4>)
 8002e68:	bb1b      	cbnz	r3, 8002eb2 <_svfiprintf_r+0x1b2>
 8002e6a:	9b03      	ldr	r3, [sp, #12]
 8002e6c:	3307      	adds	r3, #7
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	3308      	adds	r3, #8
 8002e74:	9303      	str	r3, [sp, #12]
 8002e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e78:	4433      	add	r3, r6
 8002e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e7c:	e767      	b.n	8002d4e <_svfiprintf_r+0x4e>
 8002e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e82:	460c      	mov	r4, r1
 8002e84:	2001      	movs	r0, #1
 8002e86:	e7a5      	b.n	8002dd4 <_svfiprintf_r+0xd4>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	3401      	adds	r4, #1
 8002e8c:	9305      	str	r3, [sp, #20]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f04f 0c0a 	mov.w	ip, #10
 8002e94:	4620      	mov	r0, r4
 8002e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e9a:	3a30      	subs	r2, #48	; 0x30
 8002e9c:	2a09      	cmp	r2, #9
 8002e9e:	d903      	bls.n	8002ea8 <_svfiprintf_r+0x1a8>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0c5      	beq.n	8002e30 <_svfiprintf_r+0x130>
 8002ea4:	9105      	str	r1, [sp, #20]
 8002ea6:	e7c3      	b.n	8002e30 <_svfiprintf_r+0x130>
 8002ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eac:	4604      	mov	r4, r0
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e7f0      	b.n	8002e94 <_svfiprintf_r+0x194>
 8002eb2:	ab03      	add	r3, sp, #12
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <_svfiprintf_r+0x1f8>)
 8002eba:	a904      	add	r1, sp, #16
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	f3af 8000 	nop.w
 8002ec2:	1c42      	adds	r2, r0, #1
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	d1d6      	bne.n	8002e76 <_svfiprintf_r+0x176>
 8002ec8:	89ab      	ldrh	r3, [r5, #12]
 8002eca:	065b      	lsls	r3, r3, #25
 8002ecc:	f53f af2c 	bmi.w	8002d28 <_svfiprintf_r+0x28>
 8002ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ed2:	b01d      	add	sp, #116	; 0x74
 8002ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed8:	ab03      	add	r3, sp, #12
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	462a      	mov	r2, r5
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <_svfiprintf_r+0x1f8>)
 8002ee0:	a904      	add	r1, sp, #16
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	f000 f87a 	bl	8002fdc <_printf_i>
 8002ee8:	e7eb      	b.n	8002ec2 <_svfiprintf_r+0x1c2>
 8002eea:	bf00      	nop
 8002eec:	080034fc 	.word	0x080034fc
 8002ef0:	08003506 	.word	0x08003506
 8002ef4:	00000000 	.word	0x00000000
 8002ef8:	08002c49 	.word	0x08002c49
 8002efc:	08003502 	.word	0x08003502

08002f00 <_printf_common>:
 8002f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f04:	4616      	mov	r6, r2
 8002f06:	4699      	mov	r9, r3
 8002f08:	688a      	ldr	r2, [r1, #8]
 8002f0a:	690b      	ldr	r3, [r1, #16]
 8002f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bfb8      	it	lt
 8002f14:	4613      	movlt	r3, r2
 8002f16:	6033      	str	r3, [r6, #0]
 8002f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f1c:	4607      	mov	r7, r0
 8002f1e:	460c      	mov	r4, r1
 8002f20:	b10a      	cbz	r2, 8002f26 <_printf_common+0x26>
 8002f22:	3301      	adds	r3, #1
 8002f24:	6033      	str	r3, [r6, #0]
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	0699      	lsls	r1, r3, #26
 8002f2a:	bf42      	ittt	mi
 8002f2c:	6833      	ldrmi	r3, [r6, #0]
 8002f2e:	3302      	addmi	r3, #2
 8002f30:	6033      	strmi	r3, [r6, #0]
 8002f32:	6825      	ldr	r5, [r4, #0]
 8002f34:	f015 0506 	ands.w	r5, r5, #6
 8002f38:	d106      	bne.n	8002f48 <_printf_common+0x48>
 8002f3a:	f104 0a19 	add.w	sl, r4, #25
 8002f3e:	68e3      	ldr	r3, [r4, #12]
 8002f40:	6832      	ldr	r2, [r6, #0]
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	42ab      	cmp	r3, r5
 8002f46:	dc26      	bgt.n	8002f96 <_printf_common+0x96>
 8002f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f4c:	1e13      	subs	r3, r2, #0
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	bf18      	it	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	0692      	lsls	r2, r2, #26
 8002f56:	d42b      	bmi.n	8002fb0 <_printf_common+0xb0>
 8002f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	4638      	mov	r0, r7
 8002f60:	47c0      	blx	r8
 8002f62:	3001      	adds	r0, #1
 8002f64:	d01e      	beq.n	8002fa4 <_printf_common+0xa4>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	68e5      	ldr	r5, [r4, #12]
 8002f6a:	6832      	ldr	r2, [r6, #0]
 8002f6c:	f003 0306 	and.w	r3, r3, #6
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	bf08      	it	eq
 8002f74:	1aad      	subeq	r5, r5, r2
 8002f76:	68a3      	ldr	r3, [r4, #8]
 8002f78:	6922      	ldr	r2, [r4, #16]
 8002f7a:	bf0c      	ite	eq
 8002f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f80:	2500      	movne	r5, #0
 8002f82:	4293      	cmp	r3, r2
 8002f84:	bfc4      	itt	gt
 8002f86:	1a9b      	subgt	r3, r3, r2
 8002f88:	18ed      	addgt	r5, r5, r3
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	341a      	adds	r4, #26
 8002f8e:	42b5      	cmp	r5, r6
 8002f90:	d11a      	bne.n	8002fc8 <_printf_common+0xc8>
 8002f92:	2000      	movs	r0, #0
 8002f94:	e008      	b.n	8002fa8 <_printf_common+0xa8>
 8002f96:	2301      	movs	r3, #1
 8002f98:	4652      	mov	r2, sl
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	47c0      	blx	r8
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	d103      	bne.n	8002fac <_printf_common+0xac>
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fac:	3501      	adds	r5, #1
 8002fae:	e7c6      	b.n	8002f3e <_printf_common+0x3e>
 8002fb0:	18e1      	adds	r1, r4, r3
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	2030      	movs	r0, #48	; 0x30
 8002fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fba:	4422      	add	r2, r4
 8002fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	e7c7      	b.n	8002f58 <_printf_common+0x58>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	4622      	mov	r2, r4
 8002fcc:	4649      	mov	r1, r9
 8002fce:	4638      	mov	r0, r7
 8002fd0:	47c0      	blx	r8
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d0e6      	beq.n	8002fa4 <_printf_common+0xa4>
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7d9      	b.n	8002f8e <_printf_common+0x8e>
	...

08002fdc <_printf_i>:
 8002fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	4691      	mov	r9, r2
 8002fe4:	7e27      	ldrb	r7, [r4, #24]
 8002fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fe8:	2f78      	cmp	r7, #120	; 0x78
 8002fea:	4680      	mov	r8, r0
 8002fec:	469a      	mov	sl, r3
 8002fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ff2:	d807      	bhi.n	8003004 <_printf_i+0x28>
 8002ff4:	2f62      	cmp	r7, #98	; 0x62
 8002ff6:	d80a      	bhi.n	800300e <_printf_i+0x32>
 8002ff8:	2f00      	cmp	r7, #0
 8002ffa:	f000 80d8 	beq.w	80031ae <_printf_i+0x1d2>
 8002ffe:	2f58      	cmp	r7, #88	; 0x58
 8003000:	f000 80a3 	beq.w	800314a <_printf_i+0x16e>
 8003004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800300c:	e03a      	b.n	8003084 <_printf_i+0xa8>
 800300e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003012:	2b15      	cmp	r3, #21
 8003014:	d8f6      	bhi.n	8003004 <_printf_i+0x28>
 8003016:	a001      	add	r0, pc, #4	; (adr r0, 800301c <_printf_i+0x40>)
 8003018:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800301c:	08003075 	.word	0x08003075
 8003020:	08003089 	.word	0x08003089
 8003024:	08003005 	.word	0x08003005
 8003028:	08003005 	.word	0x08003005
 800302c:	08003005 	.word	0x08003005
 8003030:	08003005 	.word	0x08003005
 8003034:	08003089 	.word	0x08003089
 8003038:	08003005 	.word	0x08003005
 800303c:	08003005 	.word	0x08003005
 8003040:	08003005 	.word	0x08003005
 8003044:	08003005 	.word	0x08003005
 8003048:	08003195 	.word	0x08003195
 800304c:	080030b9 	.word	0x080030b9
 8003050:	08003177 	.word	0x08003177
 8003054:	08003005 	.word	0x08003005
 8003058:	08003005 	.word	0x08003005
 800305c:	080031b7 	.word	0x080031b7
 8003060:	08003005 	.word	0x08003005
 8003064:	080030b9 	.word	0x080030b9
 8003068:	08003005 	.word	0x08003005
 800306c:	08003005 	.word	0x08003005
 8003070:	0800317f 	.word	0x0800317f
 8003074:	680b      	ldr	r3, [r1, #0]
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	600a      	str	r2, [r1, #0]
 800307c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003084:	2301      	movs	r3, #1
 8003086:	e0a3      	b.n	80031d0 <_printf_i+0x1f4>
 8003088:	6825      	ldr	r5, [r4, #0]
 800308a:	6808      	ldr	r0, [r1, #0]
 800308c:	062e      	lsls	r6, r5, #24
 800308e:	f100 0304 	add.w	r3, r0, #4
 8003092:	d50a      	bpl.n	80030aa <_printf_i+0xce>
 8003094:	6805      	ldr	r5, [r0, #0]
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	2d00      	cmp	r5, #0
 800309a:	da03      	bge.n	80030a4 <_printf_i+0xc8>
 800309c:	232d      	movs	r3, #45	; 0x2d
 800309e:	426d      	negs	r5, r5
 80030a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a4:	485e      	ldr	r0, [pc, #376]	; (8003220 <_printf_i+0x244>)
 80030a6:	230a      	movs	r3, #10
 80030a8:	e019      	b.n	80030de <_printf_i+0x102>
 80030aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80030ae:	6805      	ldr	r5, [r0, #0]
 80030b0:	600b      	str	r3, [r1, #0]
 80030b2:	bf18      	it	ne
 80030b4:	b22d      	sxthne	r5, r5
 80030b6:	e7ef      	b.n	8003098 <_printf_i+0xbc>
 80030b8:	680b      	ldr	r3, [r1, #0]
 80030ba:	6825      	ldr	r5, [r4, #0]
 80030bc:	1d18      	adds	r0, r3, #4
 80030be:	6008      	str	r0, [r1, #0]
 80030c0:	0628      	lsls	r0, r5, #24
 80030c2:	d501      	bpl.n	80030c8 <_printf_i+0xec>
 80030c4:	681d      	ldr	r5, [r3, #0]
 80030c6:	e002      	b.n	80030ce <_printf_i+0xf2>
 80030c8:	0669      	lsls	r1, r5, #25
 80030ca:	d5fb      	bpl.n	80030c4 <_printf_i+0xe8>
 80030cc:	881d      	ldrh	r5, [r3, #0]
 80030ce:	4854      	ldr	r0, [pc, #336]	; (8003220 <_printf_i+0x244>)
 80030d0:	2f6f      	cmp	r7, #111	; 0x6f
 80030d2:	bf0c      	ite	eq
 80030d4:	2308      	moveq	r3, #8
 80030d6:	230a      	movne	r3, #10
 80030d8:	2100      	movs	r1, #0
 80030da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030de:	6866      	ldr	r6, [r4, #4]
 80030e0:	60a6      	str	r6, [r4, #8]
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	bfa2      	ittt	ge
 80030e6:	6821      	ldrge	r1, [r4, #0]
 80030e8:	f021 0104 	bicge.w	r1, r1, #4
 80030ec:	6021      	strge	r1, [r4, #0]
 80030ee:	b90d      	cbnz	r5, 80030f4 <_printf_i+0x118>
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	d04d      	beq.n	8003190 <_printf_i+0x1b4>
 80030f4:	4616      	mov	r6, r2
 80030f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80030fa:	fb03 5711 	mls	r7, r3, r1, r5
 80030fe:	5dc7      	ldrb	r7, [r0, r7]
 8003100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003104:	462f      	mov	r7, r5
 8003106:	42bb      	cmp	r3, r7
 8003108:	460d      	mov	r5, r1
 800310a:	d9f4      	bls.n	80030f6 <_printf_i+0x11a>
 800310c:	2b08      	cmp	r3, #8
 800310e:	d10b      	bne.n	8003128 <_printf_i+0x14c>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	07df      	lsls	r7, r3, #31
 8003114:	d508      	bpl.n	8003128 <_printf_i+0x14c>
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	6861      	ldr	r1, [r4, #4]
 800311a:	4299      	cmp	r1, r3
 800311c:	bfde      	ittt	le
 800311e:	2330      	movle	r3, #48	; 0x30
 8003120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003124:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003128:	1b92      	subs	r2, r2, r6
 800312a:	6122      	str	r2, [r4, #16]
 800312c:	f8cd a000 	str.w	sl, [sp]
 8003130:	464b      	mov	r3, r9
 8003132:	aa03      	add	r2, sp, #12
 8003134:	4621      	mov	r1, r4
 8003136:	4640      	mov	r0, r8
 8003138:	f7ff fee2 	bl	8002f00 <_printf_common>
 800313c:	3001      	adds	r0, #1
 800313e:	d14c      	bne.n	80031da <_printf_i+0x1fe>
 8003140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003144:	b004      	add	sp, #16
 8003146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314a:	4835      	ldr	r0, [pc, #212]	; (8003220 <_printf_i+0x244>)
 800314c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	680e      	ldr	r6, [r1, #0]
 8003154:	061f      	lsls	r7, r3, #24
 8003156:	f856 5b04 	ldr.w	r5, [r6], #4
 800315a:	600e      	str	r6, [r1, #0]
 800315c:	d514      	bpl.n	8003188 <_printf_i+0x1ac>
 800315e:	07d9      	lsls	r1, r3, #31
 8003160:	bf44      	itt	mi
 8003162:	f043 0320 	orrmi.w	r3, r3, #32
 8003166:	6023      	strmi	r3, [r4, #0]
 8003168:	b91d      	cbnz	r5, 8003172 <_printf_i+0x196>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	f023 0320 	bic.w	r3, r3, #32
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	2310      	movs	r3, #16
 8003174:	e7b0      	b.n	80030d8 <_printf_i+0xfc>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	f043 0320 	orr.w	r3, r3, #32
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	2378      	movs	r3, #120	; 0x78
 8003180:	4828      	ldr	r0, [pc, #160]	; (8003224 <_printf_i+0x248>)
 8003182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003186:	e7e3      	b.n	8003150 <_printf_i+0x174>
 8003188:	065e      	lsls	r6, r3, #25
 800318a:	bf48      	it	mi
 800318c:	b2ad      	uxthmi	r5, r5
 800318e:	e7e6      	b.n	800315e <_printf_i+0x182>
 8003190:	4616      	mov	r6, r2
 8003192:	e7bb      	b.n	800310c <_printf_i+0x130>
 8003194:	680b      	ldr	r3, [r1, #0]
 8003196:	6826      	ldr	r6, [r4, #0]
 8003198:	6960      	ldr	r0, [r4, #20]
 800319a:	1d1d      	adds	r5, r3, #4
 800319c:	600d      	str	r5, [r1, #0]
 800319e:	0635      	lsls	r5, r6, #24
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	d501      	bpl.n	80031a8 <_printf_i+0x1cc>
 80031a4:	6018      	str	r0, [r3, #0]
 80031a6:	e002      	b.n	80031ae <_printf_i+0x1d2>
 80031a8:	0671      	lsls	r1, r6, #25
 80031aa:	d5fb      	bpl.n	80031a4 <_printf_i+0x1c8>
 80031ac:	8018      	strh	r0, [r3, #0]
 80031ae:	2300      	movs	r3, #0
 80031b0:	6123      	str	r3, [r4, #16]
 80031b2:	4616      	mov	r6, r2
 80031b4:	e7ba      	b.n	800312c <_printf_i+0x150>
 80031b6:	680b      	ldr	r3, [r1, #0]
 80031b8:	1d1a      	adds	r2, r3, #4
 80031ba:	600a      	str	r2, [r1, #0]
 80031bc:	681e      	ldr	r6, [r3, #0]
 80031be:	6862      	ldr	r2, [r4, #4]
 80031c0:	2100      	movs	r1, #0
 80031c2:	4630      	mov	r0, r6
 80031c4:	f7fd f874 	bl	80002b0 <memchr>
 80031c8:	b108      	cbz	r0, 80031ce <_printf_i+0x1f2>
 80031ca:	1b80      	subs	r0, r0, r6
 80031cc:	6060      	str	r0, [r4, #4]
 80031ce:	6863      	ldr	r3, [r4, #4]
 80031d0:	6123      	str	r3, [r4, #16]
 80031d2:	2300      	movs	r3, #0
 80031d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031d8:	e7a8      	b.n	800312c <_printf_i+0x150>
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	4632      	mov	r2, r6
 80031de:	4649      	mov	r1, r9
 80031e0:	4640      	mov	r0, r8
 80031e2:	47d0      	blx	sl
 80031e4:	3001      	adds	r0, #1
 80031e6:	d0ab      	beq.n	8003140 <_printf_i+0x164>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	079b      	lsls	r3, r3, #30
 80031ec:	d413      	bmi.n	8003216 <_printf_i+0x23a>
 80031ee:	68e0      	ldr	r0, [r4, #12]
 80031f0:	9b03      	ldr	r3, [sp, #12]
 80031f2:	4298      	cmp	r0, r3
 80031f4:	bfb8      	it	lt
 80031f6:	4618      	movlt	r0, r3
 80031f8:	e7a4      	b.n	8003144 <_printf_i+0x168>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4632      	mov	r2, r6
 80031fe:	4649      	mov	r1, r9
 8003200:	4640      	mov	r0, r8
 8003202:	47d0      	blx	sl
 8003204:	3001      	adds	r0, #1
 8003206:	d09b      	beq.n	8003140 <_printf_i+0x164>
 8003208:	3501      	adds	r5, #1
 800320a:	68e3      	ldr	r3, [r4, #12]
 800320c:	9903      	ldr	r1, [sp, #12]
 800320e:	1a5b      	subs	r3, r3, r1
 8003210:	42ab      	cmp	r3, r5
 8003212:	dcf2      	bgt.n	80031fa <_printf_i+0x21e>
 8003214:	e7eb      	b.n	80031ee <_printf_i+0x212>
 8003216:	2500      	movs	r5, #0
 8003218:	f104 0619 	add.w	r6, r4, #25
 800321c:	e7f5      	b.n	800320a <_printf_i+0x22e>
 800321e:	bf00      	nop
 8003220:	0800350d 	.word	0x0800350d
 8003224:	0800351e 	.word	0x0800351e

08003228 <memcpy>:
 8003228:	440a      	add	r2, r1
 800322a:	4291      	cmp	r1, r2
 800322c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003230:	d100      	bne.n	8003234 <memcpy+0xc>
 8003232:	4770      	bx	lr
 8003234:	b510      	push	{r4, lr}
 8003236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800323a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800323e:	4291      	cmp	r1, r2
 8003240:	d1f9      	bne.n	8003236 <memcpy+0xe>
 8003242:	bd10      	pop	{r4, pc}

08003244 <memmove>:
 8003244:	4288      	cmp	r0, r1
 8003246:	b510      	push	{r4, lr}
 8003248:	eb01 0402 	add.w	r4, r1, r2
 800324c:	d902      	bls.n	8003254 <memmove+0x10>
 800324e:	4284      	cmp	r4, r0
 8003250:	4623      	mov	r3, r4
 8003252:	d807      	bhi.n	8003264 <memmove+0x20>
 8003254:	1e43      	subs	r3, r0, #1
 8003256:	42a1      	cmp	r1, r4
 8003258:	d008      	beq.n	800326c <memmove+0x28>
 800325a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800325e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003262:	e7f8      	b.n	8003256 <memmove+0x12>
 8003264:	4402      	add	r2, r0
 8003266:	4601      	mov	r1, r0
 8003268:	428a      	cmp	r2, r1
 800326a:	d100      	bne.n	800326e <memmove+0x2a>
 800326c:	bd10      	pop	{r4, pc}
 800326e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003276:	e7f7      	b.n	8003268 <memmove+0x24>

08003278 <_free_r>:
 8003278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800327a:	2900      	cmp	r1, #0
 800327c:	d048      	beq.n	8003310 <_free_r+0x98>
 800327e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003282:	9001      	str	r0, [sp, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f1a1 0404 	sub.w	r4, r1, #4
 800328a:	bfb8      	it	lt
 800328c:	18e4      	addlt	r4, r4, r3
 800328e:	f000 f8d3 	bl	8003438 <__malloc_lock>
 8003292:	4a20      	ldr	r2, [pc, #128]	; (8003314 <_free_r+0x9c>)
 8003294:	9801      	ldr	r0, [sp, #4]
 8003296:	6813      	ldr	r3, [r2, #0]
 8003298:	4615      	mov	r5, r2
 800329a:	b933      	cbnz	r3, 80032aa <_free_r+0x32>
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	6014      	str	r4, [r2, #0]
 80032a0:	b003      	add	sp, #12
 80032a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032a6:	f000 b8cd 	b.w	8003444 <__malloc_unlock>
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	d90b      	bls.n	80032c6 <_free_r+0x4e>
 80032ae:	6821      	ldr	r1, [r4, #0]
 80032b0:	1862      	adds	r2, r4, r1
 80032b2:	4293      	cmp	r3, r2
 80032b4:	bf04      	itt	eq
 80032b6:	681a      	ldreq	r2, [r3, #0]
 80032b8:	685b      	ldreq	r3, [r3, #4]
 80032ba:	6063      	str	r3, [r4, #4]
 80032bc:	bf04      	itt	eq
 80032be:	1852      	addeq	r2, r2, r1
 80032c0:	6022      	streq	r2, [r4, #0]
 80032c2:	602c      	str	r4, [r5, #0]
 80032c4:	e7ec      	b.n	80032a0 <_free_r+0x28>
 80032c6:	461a      	mov	r2, r3
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b10b      	cbz	r3, 80032d0 <_free_r+0x58>
 80032cc:	42a3      	cmp	r3, r4
 80032ce:	d9fa      	bls.n	80032c6 <_free_r+0x4e>
 80032d0:	6811      	ldr	r1, [r2, #0]
 80032d2:	1855      	adds	r5, r2, r1
 80032d4:	42a5      	cmp	r5, r4
 80032d6:	d10b      	bne.n	80032f0 <_free_r+0x78>
 80032d8:	6824      	ldr	r4, [r4, #0]
 80032da:	4421      	add	r1, r4
 80032dc:	1854      	adds	r4, r2, r1
 80032de:	42a3      	cmp	r3, r4
 80032e0:	6011      	str	r1, [r2, #0]
 80032e2:	d1dd      	bne.n	80032a0 <_free_r+0x28>
 80032e4:	681c      	ldr	r4, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	6053      	str	r3, [r2, #4]
 80032ea:	4421      	add	r1, r4
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	e7d7      	b.n	80032a0 <_free_r+0x28>
 80032f0:	d902      	bls.n	80032f8 <_free_r+0x80>
 80032f2:	230c      	movs	r3, #12
 80032f4:	6003      	str	r3, [r0, #0]
 80032f6:	e7d3      	b.n	80032a0 <_free_r+0x28>
 80032f8:	6825      	ldr	r5, [r4, #0]
 80032fa:	1961      	adds	r1, r4, r5
 80032fc:	428b      	cmp	r3, r1
 80032fe:	bf04      	itt	eq
 8003300:	6819      	ldreq	r1, [r3, #0]
 8003302:	685b      	ldreq	r3, [r3, #4]
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	bf04      	itt	eq
 8003308:	1949      	addeq	r1, r1, r5
 800330a:	6021      	streq	r1, [r4, #0]
 800330c:	6054      	str	r4, [r2, #4]
 800330e:	e7c7      	b.n	80032a0 <_free_r+0x28>
 8003310:	b003      	add	sp, #12
 8003312:	bd30      	pop	{r4, r5, pc}
 8003314:	20000090 	.word	0x20000090

08003318 <_malloc_r>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	1ccd      	adds	r5, r1, #3
 800331c:	f025 0503 	bic.w	r5, r5, #3
 8003320:	3508      	adds	r5, #8
 8003322:	2d0c      	cmp	r5, #12
 8003324:	bf38      	it	cc
 8003326:	250c      	movcc	r5, #12
 8003328:	2d00      	cmp	r5, #0
 800332a:	4606      	mov	r6, r0
 800332c:	db01      	blt.n	8003332 <_malloc_r+0x1a>
 800332e:	42a9      	cmp	r1, r5
 8003330:	d903      	bls.n	800333a <_malloc_r+0x22>
 8003332:	230c      	movs	r3, #12
 8003334:	6033      	str	r3, [r6, #0]
 8003336:	2000      	movs	r0, #0
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333a:	f000 f87d 	bl	8003438 <__malloc_lock>
 800333e:	4921      	ldr	r1, [pc, #132]	; (80033c4 <_malloc_r+0xac>)
 8003340:	680a      	ldr	r2, [r1, #0]
 8003342:	4614      	mov	r4, r2
 8003344:	b99c      	cbnz	r4, 800336e <_malloc_r+0x56>
 8003346:	4f20      	ldr	r7, [pc, #128]	; (80033c8 <_malloc_r+0xb0>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b923      	cbnz	r3, 8003356 <_malloc_r+0x3e>
 800334c:	4621      	mov	r1, r4
 800334e:	4630      	mov	r0, r6
 8003350:	f000 f862 	bl	8003418 <_sbrk_r>
 8003354:	6038      	str	r0, [r7, #0]
 8003356:	4629      	mov	r1, r5
 8003358:	4630      	mov	r0, r6
 800335a:	f000 f85d 	bl	8003418 <_sbrk_r>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	d123      	bne.n	80033aa <_malloc_r+0x92>
 8003362:	230c      	movs	r3, #12
 8003364:	6033      	str	r3, [r6, #0]
 8003366:	4630      	mov	r0, r6
 8003368:	f000 f86c 	bl	8003444 <__malloc_unlock>
 800336c:	e7e3      	b.n	8003336 <_malloc_r+0x1e>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	1b5b      	subs	r3, r3, r5
 8003372:	d417      	bmi.n	80033a4 <_malloc_r+0x8c>
 8003374:	2b0b      	cmp	r3, #11
 8003376:	d903      	bls.n	8003380 <_malloc_r+0x68>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	441c      	add	r4, r3
 800337c:	6025      	str	r5, [r4, #0]
 800337e:	e004      	b.n	800338a <_malloc_r+0x72>
 8003380:	6863      	ldr	r3, [r4, #4]
 8003382:	42a2      	cmp	r2, r4
 8003384:	bf0c      	ite	eq
 8003386:	600b      	streq	r3, [r1, #0]
 8003388:	6053      	strne	r3, [r2, #4]
 800338a:	4630      	mov	r0, r6
 800338c:	f000 f85a 	bl	8003444 <__malloc_unlock>
 8003390:	f104 000b 	add.w	r0, r4, #11
 8003394:	1d23      	adds	r3, r4, #4
 8003396:	f020 0007 	bic.w	r0, r0, #7
 800339a:	1ac2      	subs	r2, r0, r3
 800339c:	d0cc      	beq.n	8003338 <_malloc_r+0x20>
 800339e:	1a1b      	subs	r3, r3, r0
 80033a0:	50a3      	str	r3, [r4, r2]
 80033a2:	e7c9      	b.n	8003338 <_malloc_r+0x20>
 80033a4:	4622      	mov	r2, r4
 80033a6:	6864      	ldr	r4, [r4, #4]
 80033a8:	e7cc      	b.n	8003344 <_malloc_r+0x2c>
 80033aa:	1cc4      	adds	r4, r0, #3
 80033ac:	f024 0403 	bic.w	r4, r4, #3
 80033b0:	42a0      	cmp	r0, r4
 80033b2:	d0e3      	beq.n	800337c <_malloc_r+0x64>
 80033b4:	1a21      	subs	r1, r4, r0
 80033b6:	4630      	mov	r0, r6
 80033b8:	f000 f82e 	bl	8003418 <_sbrk_r>
 80033bc:	3001      	adds	r0, #1
 80033be:	d1dd      	bne.n	800337c <_malloc_r+0x64>
 80033c0:	e7cf      	b.n	8003362 <_malloc_r+0x4a>
 80033c2:	bf00      	nop
 80033c4:	20000090 	.word	0x20000090
 80033c8:	20000094 	.word	0x20000094

080033cc <_realloc_r>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	4607      	mov	r7, r0
 80033d0:	4614      	mov	r4, r2
 80033d2:	460e      	mov	r6, r1
 80033d4:	b921      	cbnz	r1, 80033e0 <_realloc_r+0x14>
 80033d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033da:	4611      	mov	r1, r2
 80033dc:	f7ff bf9c 	b.w	8003318 <_malloc_r>
 80033e0:	b922      	cbnz	r2, 80033ec <_realloc_r+0x20>
 80033e2:	f7ff ff49 	bl	8003278 <_free_r>
 80033e6:	4625      	mov	r5, r4
 80033e8:	4628      	mov	r0, r5
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	f000 f830 	bl	8003450 <_malloc_usable_size_r>
 80033f0:	42a0      	cmp	r0, r4
 80033f2:	d20f      	bcs.n	8003414 <_realloc_r+0x48>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4638      	mov	r0, r7
 80033f8:	f7ff ff8e 	bl	8003318 <_malloc_r>
 80033fc:	4605      	mov	r5, r0
 80033fe:	2800      	cmp	r0, #0
 8003400:	d0f2      	beq.n	80033e8 <_realloc_r+0x1c>
 8003402:	4631      	mov	r1, r6
 8003404:	4622      	mov	r2, r4
 8003406:	f7ff ff0f 	bl	8003228 <memcpy>
 800340a:	4631      	mov	r1, r6
 800340c:	4638      	mov	r0, r7
 800340e:	f7ff ff33 	bl	8003278 <_free_r>
 8003412:	e7e9      	b.n	80033e8 <_realloc_r+0x1c>
 8003414:	4635      	mov	r5, r6
 8003416:	e7e7      	b.n	80033e8 <_realloc_r+0x1c>

08003418 <_sbrk_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4d06      	ldr	r5, [pc, #24]	; (8003434 <_sbrk_r+0x1c>)
 800341c:	2300      	movs	r3, #0
 800341e:	4604      	mov	r4, r0
 8003420:	4608      	mov	r0, r1
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	f7fd fc84 	bl	8000d30 <_sbrk>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_sbrk_r+0x1a>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_sbrk_r+0x1a>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	20000530 	.word	0x20000530

08003438 <__malloc_lock>:
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <__malloc_lock+0x8>)
 800343a:	f000 b811 	b.w	8003460 <__retarget_lock_acquire_recursive>
 800343e:	bf00      	nop
 8003440:	20000538 	.word	0x20000538

08003444 <__malloc_unlock>:
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <__malloc_unlock+0x8>)
 8003446:	f000 b80c 	b.w	8003462 <__retarget_lock_release_recursive>
 800344a:	bf00      	nop
 800344c:	20000538 	.word	0x20000538

08003450 <_malloc_usable_size_r>:
 8003450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003454:	1f18      	subs	r0, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfbc      	itt	lt
 800345a:	580b      	ldrlt	r3, [r1, r0]
 800345c:	18c0      	addlt	r0, r0, r3
 800345e:	4770      	bx	lr

08003460 <__retarget_lock_acquire_recursive>:
 8003460:	4770      	bx	lr

08003462 <__retarget_lock_release_recursive>:
 8003462:	4770      	bx	lr

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
