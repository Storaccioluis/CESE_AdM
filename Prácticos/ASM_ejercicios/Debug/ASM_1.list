
ASM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003154  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003390  08003390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000004d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000540  20000540  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ac6a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000d64e  00000000  00000000  0002ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bea  00000000  00000000  00038358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000960  00000000  00000000  00039f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db363  00000000  00000000  0003a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000008a8  00000000  00000000  00115c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023af3  00000000  00000000  001164b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00139fab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a18  00000000  00000000  0013a000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080032ec 	.word	0x080032ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080032ec 	.word	0x080032ec

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_zeros:
        mov r2, 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <.asm_zeros_for>:
        .asm_zeros_for:
        str r2,[r0],4
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
        subs r1,1
 8000200:	3901      	subs	r1, #1
        bne  .asm_zeros_for
 8000202:	d1fb      	bne.n	80001fc <.asm_zeros_for>
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_productoEscalar32:
     .asm_productoEscalar32_for:
         ldr r10,[r0],4
 8000206:	f850 ab04 	ldr.w	sl, [r0], #4
         MUL r4,r10,r3
 800020a:	fb0a f403 	mul.w	r4, sl, r3
         str r4,[r1],4
 800020e:	f841 4b04 	str.w	r4, [r1], #4
         subs r2,1
 8000212:	3a01      	subs	r2, #1
         bne .asm_productoEscalar32_for
 8000214:	d1f7      	bne.n	8000206 <asm_productoEscalar32>
         bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005ce:	f3ef 8314 	mrs	r3, CONTROL
 80005d2:	607b      	str	r3, [r7, #4]
  return(result);
 80005d4:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80005d6:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f383 8814 	msr	CONTROL, r3
}
 80005ea:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005ec:	f3ef 8314 	mrs	r3, CONTROL
 80005f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80005f2:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80005f4:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	f023 0301 	bic.w	r3, r3, #1
 80005fc:	61fb      	str	r3, [r7, #28]
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	f383 8814 	msr	CONTROL, r3
}
 8000608:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800060a:	f3ef 8314 	mrs	r3, CONTROL
 800060e:	617b      	str	r3, [r7, #20]
  return(result);
 8000610:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000612:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000614:	f7ff fdec 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000618:	f3ef 8314 	mrs	r3, CONTROL
 800061c:	61bb      	str	r3, [r7, #24]
  return(result);
 800061e:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000620:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000622:	bf00      	nop
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <vPrintString>:

void vPrintString( const char *pcString )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fdef 	bl	8000218 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	230a      	movs	r3, #10
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <vPrintString+0x24>)
 8000644:	f001 fc49 	bl	8001eda <HAL_UART_Transmit>


}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b0ae      	sub	sp, #184	; 0xb8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb1f 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f841 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f901 	bl	8000868 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000666:	f000 f8a7 	bl	80007b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066a:	f000 f8cf 	bl	800080c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 800066e:	f7ff ffab 	bl	80005c8 <PrivilegiosSVC>

  uint32_t vector[10];
  uint32_t tam=10;
 8000672:	230a      	movs	r3, #10
 8000674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  uint32_t vectorIn[10]={0,1,2,3,4,5,6,7,8,9};
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x88>)
 800067a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 0003 	ldmia.w	r5, {r0, r1}
 800068c:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOut[10];
  uint32_t escalar=2;
 8000690:	2302      	movs	r3, #2
 8000692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  const uint32_t Resultado = asm_sum (5, 3);
 8000696:	2103      	movs	r1, #3
 8000698:	2005      	movs	r0, #5
 800069a:	f7ff fdab 	bl	80001f4 <asm_sum>
 800069e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

  asm_zeros(&vector,tam);
 80006a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80006a6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fda4 	bl	80001f8 <asm_zeros>
  asm_productoEscalar32(&vectorIn,&vectorOut,10,escalar);
 80006b0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80006b4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80006b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006bc:	220a      	movs	r2, #10
 80006be:	f7ff fda2 	bl	8000206 <asm_productoEscalar32>

  char buffer[50];
  sprintf(buffer,"Resultado :%d\n",Resultado);
 80006c2:	463b      	mov	r3, r7
 80006c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80006c8:	4905      	ldr	r1, [pc, #20]	; (80006e0 <main+0x8c>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f9e0 	bl	8002a90 <siprintf>
  vPrintString(buffer);
 80006d0:	463b      	mov	r3, r7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffaa 	bl	800062c <vPrintString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x84>
 80006da:	bf00      	nop
 80006dc:	08003314 	.word	0x08003314
 80006e0:	08003304 	.word	0x08003304

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f9c4 	bl	8002a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xcc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xd0>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000744:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000758:	23a8      	movs	r3, #168	; 0xa8
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fef5 	bl	8001558 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f926 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f956 	bl	8001a48 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a2:	f000 f90f 	bl	80009c4 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_USART3_UART_Init>:
  * @param None
  * @retval None
  */

static void MX_USART3_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART3_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007f0:	f001 fb26 	bl	8001e40 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f8e3 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000098 	.word	0x20000098
 8000808:	40004800 	.word	0x40004800

0800080c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000816:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081a:	2204      	movs	r2, #4
 800081c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000820:	2202      	movs	r2, #2
 8000822:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082c:	2202      	movs	r2, #2
 800082e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	2201      	movs	r2, #1
 8000834:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2201      	movs	r2, #1
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	f000 fd65 	bl	800131e <HAL_PCD_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f8b3 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000dc 	.word	0x200000dc

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a4b      	ldr	r2, [pc, #300]	; (80009b4 <MX_GPIO_Init+0x14c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4b45      	ldr	r3, [pc, #276]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b42      	ldr	r3, [pc, #264]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a3d      	ldr	r2, [pc, #244]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <MX_GPIO_Init+0x14c>)
 8000914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f244 0181 	movw	r1, #16513	; 0x4081
 800092c:	4822      	ldr	r0, [pc, #136]	; (80009b8 <MX_GPIO_Init+0x150>)
 800092e:	f000 fcdd 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	4821      	ldr	r0, [pc, #132]	; (80009bc <MX_GPIO_Init+0x154>)
 8000938:	f000 fcd8 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_GPIO_Init+0x158>)
 8000954:	f000 fb1e 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000958:	f244 0381 	movw	r3, #16513	; 0x4081
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x150>)
 8000972:	f000 fb0f 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <MX_GPIO_Init+0x154>)
 800098e:	f000 fb01 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_GPIO_Init+0x154>)
 80009a6:	f000 faf5 	bl	8000f94 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40021800 	.word	0x40021800
 80009c0:	40020800 	.word	0x40020800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_UART_MspInit+0x8c>)
 8000a98:	f000 fa7c 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004800 	.word	0x40004800
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ad0:	d13f      	bne.n	8000b52 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b00:	230a      	movs	r3, #10
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <HAL_PCD_MspInit+0xb0>)
 8000b0c:	f000 fa42 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <HAL_PCD_MspInit+0xb0>)
 8000b26:	f000 fa35 	bl	8000f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6353      	str	r3, [r2, #52]	; 0x34
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_PCD_MspInit+0xac>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8c6 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f001 ff20 	bl	8002a2c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20030000 	.word	0x20030000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	20000540 	.word	0x20000540

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd7 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f001 fedf 	bl	8002a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fceb 	bl	8000654 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c8c:	08003398 	.word	0x08003398
  ldr r2, =_sbss
 8000c90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c94:	20000540 	.word	0x20000540

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f931 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe7e 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f93b 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d1c:	f000 f911 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	2000052c 	.word	0x2000052c

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000052c 	.word	0x2000052c

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffde 	bl	8000d68 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff47 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5c 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e177      	b.n	80012a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8166 	bne.w	800129a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80c0 	beq.w	800129a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <HAL_GPIO_Init+0x324>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a65      	ldr	r2, [pc, #404]	; (80012b8 <HAL_GPIO_Init+0x324>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <HAL_GPIO_Init+0x324>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	4a61      	ldr	r2, [pc, #388]	; (80012bc <HAL_GPIO_Init+0x328>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x32c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d037      	beq.n	80011d2 <HAL_GPIO_Init+0x23e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <HAL_GPIO_Init+0x330>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d031      	beq.n	80011ce <HAL_GPIO_Init+0x23a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_GPIO_Init+0x334>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02b      	beq.n	80011ca <HAL_GPIO_Init+0x236>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a55      	ldr	r2, [pc, #340]	; (80012cc <HAL_GPIO_Init+0x338>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x232>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x33c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x22e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x340>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x22a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x344>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x226>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x348>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x222>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x34c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x21e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x350>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x21a>
 80011aa:	2309      	movs	r3, #9
 80011ac:	e012      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ae:	230a      	movs	r3, #10
 80011b0:	e010      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e00e      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	; (80012bc <HAL_GPIO_Init+0x328>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <HAL_GPIO_Init+0x354>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001216:	4a34      	ldr	r2, [pc, #208]	; (80012e8 <HAL_GPIO_Init+0x354>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HAL_GPIO_Init+0x354>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001240:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <HAL_GPIO_Init+0x354>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_GPIO_Init+0x354>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126a:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <HAL_GPIO_Init+0x354>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_GPIO_Init+0x354>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_GPIO_Init+0x354>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae84 	bls.w	8000fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40021c00 	.word	0x40021c00
 80012e0:	40022000 	.word	0x40022000
 80012e4:	40022400 	.word	0x40022400
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800131e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001320:	b08f      	sub	sp, #60	; 0x3c
 8001322:	af0a      	add	r7, sp, #40	; 0x28
 8001324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e10f      	b.n	8001550 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fbb0 	bl	8000ab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f001 f8dd 	bl	800252e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	687e      	ldr	r6, [r7, #4]
 800137c:	466d      	mov	r5, sp
 800137e:	f106 0410 	add.w	r4, r6, #16
 8001382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001392:	1d33      	adds	r3, r6, #4
 8001394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f001 f868 	bl	800246c <USB_CoreInit>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0d0      	b.n	8001550 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f8cb 	bl	8002550 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e04a      	b.n	8001456 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	333d      	adds	r3, #61	; 0x3d
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	333c      	adds	r3, #60	; 0x3c
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	b298      	uxth	r0, r3
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3342      	adds	r3, #66	; 0x42
 80013fc:	4602      	mov	r2, r0
 80013fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	333f      	adds	r3, #63	; 0x3f
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3344      	adds	r3, #68	; 0x44
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3348      	adds	r3, #72	; 0x48
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3350      	adds	r3, #80	; 0x50
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3af      	bcc.n	80013c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e044      	b.n	80014f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3b5      	bcc.n	8001466 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	687e      	ldr	r6, [r7, #4]
 8001502:	466d      	mov	r5, sp
 8001504:	f106 0410 	add.w	r4, r6, #16
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001514:	e885 0003 	stmia.w	r5, {r0, r1}
 8001518:	1d33      	adds	r3, r6, #4
 800151a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f001 f863 	bl	80025e8 <USB_DevInit>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e00d      	b.n	8001550 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fa0e 	bl	800296a <USB_DevDisconnect>

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e264      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d075      	beq.n	8001662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001576:	4ba3      	ldr	r3, [pc, #652]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b04      	cmp	r3, #4
 8001580:	d00c      	beq.n	800159c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4ba0      	ldr	r3, [pc, #640]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158a:	2b08      	cmp	r3, #8
 800158c:	d112      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	4b9d      	ldr	r3, [pc, #628]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159a:	d10b      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	4b99      	ldr	r3, [pc, #612]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d05b      	beq.n	8001660 <HAL_RCC_OscConfig+0x108>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d157      	bne.n	8001660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e23f      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x74>
 80015be:	4b91      	ldr	r3, [pc, #580]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a90      	ldr	r2, [pc, #576]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01d      	b.n	8001608 <HAL_RCC_OscConfig+0xb0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x98>
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a8a      	ldr	r2, [pc, #552]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a87      	ldr	r2, [pc, #540]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0xb0>
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a83      	ldr	r2, [pc, #524]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a80      	ldr	r2, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fbaa 	bl	8000d68 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fba6 	bl	8000d68 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e204      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b76      	ldr	r3, [pc, #472]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0xc0>
 8001636:	e014      	b.n	8001662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fb96 	bl	8000d68 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fb92 	bl	8000d68 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1f0      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0xe8>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d063      	beq.n	8001736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001682:	2b08      	cmp	r3, #8
 8001684:	d11c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d116      	bne.n	80016c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x152>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e1c4      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4952      	ldr	r1, [pc, #328]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	e03a      	b.n	8001736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_RCC_OscConfig+0x2b0>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb4b 	bl	8000d68 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb47 	bl	8000d68 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1a5      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4940      	ldr	r1, [pc, #256]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_OscConfig+0x2b0>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fb2a 	bl	8000d68 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fb26 	bl	8000d68 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e184      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d030      	beq.n	80017a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d016      	beq.n	8001778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_RCC_OscConfig+0x2b4>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fb0a 	bl	8000d68 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fb06 	bl	8000d68 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e164      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x200>
 8001776:	e015      	b.n	80017a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_OscConfig+0x2b4>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff faf3 	bl	8000d68 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff faef 	bl	8000d68 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e14d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a0 	beq.w	80018f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x2b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d121      	bne.n	8001832 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_RCC_OscConfig+0x2b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_RCC_OscConfig+0x2b8>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fab5 	bl	8000d68 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e011      	b.n	8001826 <HAL_RCC_OscConfig+0x2ce>
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	42470000 	.word	0x42470000
 800180c:	42470e80 	.word	0x42470e80
 8001810:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001814:	f7ff faa8 	bl	8000d68 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e106      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <HAL_RCC_OscConfig+0x4e4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x2f0>
 800183a:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a80      	ldr	r2, [pc, #512]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	e01c      	b.n	8001882 <HAL_RCC_OscConfig+0x32a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x312>
 8001850:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a7a      	ldr	r2, [pc, #488]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a77      	ldr	r2, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	e00b      	b.n	8001882 <HAL_RCC_OscConfig+0x32a>
 800186a:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a74      	ldr	r2, [pc, #464]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a71      	ldr	r2, [pc, #452]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d015      	beq.n	80018b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fa6d 	bl	8000d68 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fa69 	bl	8000d68 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0c5      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ee      	beq.n	8001892 <HAL_RCC_OscConfig+0x33a>
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fa57 	bl	8000d68 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fa53 	bl	8000d68 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0af      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ee      	bne.n	80018be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a55      	ldr	r2, [pc, #340]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80018ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 809b 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d05c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d141      	bne.n	8001994 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x4ec>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fa27 	bl	8000d68 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fa23 	bl	8000d68 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e081      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69da      	ldr	r2, [r3, #28]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	019b      	lsls	r3, r3, #6
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	3b01      	subs	r3, #1
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	061b      	lsls	r3, r3, #24
 8001960:	4937      	ldr	r1, [pc, #220]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCC_OscConfig+0x4ec>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f9fc 	bl	8000d68 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9f8 	bl	8000d68 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e056      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x41c>
 8001992:	e04e      	b.n	8001a32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x4ec>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f9e5 	bl	8000d68 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f9e1 	bl	8000d68 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e03f      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x44a>
 80019c0:	e037      	b.n	8001a32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e032      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_RCC_OscConfig+0x4e8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d028      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d121      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d11a      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d111      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470060 	.word	0x42470060

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cc      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d90c      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d044      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d119      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e06f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e067      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4934      	ldr	r1, [pc, #208]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b38:	f7ff f916 	bl	8000d68 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff f912 	bl	8000d68 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e04f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d20c      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f876 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00
 8001c04:	40023800 	.word	0x40023800
 8001c08:	0800333c 	.word	0x0800333c
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	2300      	movs	r3, #0
 8001c26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2c:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d00d      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x40>
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	f200 80bd 	bhi.w	8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x34>
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c46:	e0b7      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c4a:	60bb      	str	r3, [r7, #8]
       break;
 8001c4c:	e0b7      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4e:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c50:	60bb      	str	r3, [r7, #8]
      break;
 8001c52:	e0b4      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c54:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04d      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	ea02 0800 	and.w	r8, r2, r0
 8001c82:	ea03 0901 	and.w	r9, r3, r1
 8001c86:	4640      	mov	r0, r8
 8001c88:	4649      	mov	r1, r9
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	014b      	lsls	r3, r1, #5
 8001c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c98:	0142      	lsls	r2, r0, #5
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	ebb0 0008 	subs.w	r0, r0, r8
 8001ca2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cb4:	0182      	lsls	r2, r0, #6
 8001cb6:	1a12      	subs	r2, r2, r0
 8001cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbc:	f04f 0000 	mov.w	r0, #0
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	00d9      	lsls	r1, r3, #3
 8001cc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cca:	00d0      	lsls	r0, r2, #3
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	eb12 0208 	adds.w	r2, r2, r8
 8001cd4:	eb43 0309 	adc.w	r3, r3, r9
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0259      	lsls	r1, r3, #9
 8001ce2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ce6:	0250      	lsls	r0, r2, #9
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe faea 	bl	80002d0 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e04a      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	ea02 0400 	and.w	r4, r2, r0
 8001d1e:	ea03 0501 	and.w	r5, r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	014b      	lsls	r3, r1, #5
 8001d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d34:	0142      	lsls	r2, r0, #5
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	1b00      	subs	r0, r0, r4
 8001d3c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	018b      	lsls	r3, r1, #6
 8001d4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d4e:	0182      	lsls	r2, r0, #6
 8001d50:	1a12      	subs	r2, r2, r0
 8001d52:	eb63 0301 	sbc.w	r3, r3, r1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	00d9      	lsls	r1, r3, #3
 8001d60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d64:	00d0      	lsls	r0, r2, #3
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	1912      	adds	r2, r2, r4
 8001d6c:	eb45 0303 	adc.w	r3, r5, r3
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	0299      	lsls	r1, r3, #10
 8001d7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d7e:	0290      	lsls	r0, r2, #10
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f7fe fa9e 	bl	80002d0 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	60bb      	str	r3, [r7, #8]
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dba:	60bb      	str	r3, [r7, #8]
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	0800334c 	.word	0x0800334c

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffdc 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0b5b      	lsrs	r3, r3, #13
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800334c 	.word	0x0800334c

08001e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e03f      	b.n	8001ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fdda 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f929 	bl	80020dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b08a      	sub	sp, #40	; 0x28
 8001ede:	af02      	add	r7, sp, #8
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d17c      	bne.n	8001ff4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_UART_Transmit+0x2c>
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e075      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_UART_Transmit+0x3e>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e06e      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2221      	movs	r2, #33	; 0x21
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f2e:	f7fe ff1b 	bl	8000d68 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d108      	bne.n	8001f5c <HAL_UART_Transmit+0x82>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e003      	b.n	8001f64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f6c:	e02a      	b.n	8001fc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f840 	bl	8001ffe <UART_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e036      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e007      	b.n	8001fb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1cf      	bne.n	8001f6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f810 	bl	8001ffe <UART_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e006      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b090      	sub	sp, #64	; 0x40
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800200e:	e050      	b.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002016:	d04c      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <UART_WaitOnFlagUntilTimeout+0x30>
 800201e:	f7fe fea3 	bl	8000d68 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800202a:	429a      	cmp	r2, r3
 800202c:	d241      	bcs.n	80020b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	330c      	adds	r3, #12
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	e853 3f00 	ldrex	r3, [r3]
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	330c      	adds	r3, #12
 800204c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204e:	637a      	str	r2, [r7, #52]	; 0x34
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002056:	e841 2300 	strex	r3, r2, [r1]
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1e5      	bne.n	800202e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3314      	adds	r3, #20
 8002068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	e853 3f00 	ldrex	r3, [r3]
 8002070:	613b      	str	r3, [r7, #16]
   return(result);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3314      	adds	r3, #20
 8002080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002082:	623a      	str	r2, [r7, #32]
 8002084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002086:	69f9      	ldr	r1, [r7, #28]
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	e841 2300 	strex	r3, r2, [r1]
 800208e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1e5      	bne.n	8002062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e00f      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4013      	ands	r3, r2
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d09f      	beq.n	8002010 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3740      	adds	r7, #64	; 0x40
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020e0:	b09f      	sub	sp, #124	; 0x7c
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f2:	68d9      	ldr	r1, [r3, #12]
 80020f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	ea40 0301 	orr.w	r3, r0, r1
 80020fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	431a      	orrs	r2, r3
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	431a      	orrs	r2, r3
 800210e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4313      	orrs	r3, r2
 8002114:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002120:	f021 010c 	bic.w	r1, r1, #12
 8002124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800212a:	430b      	orrs	r3, r1
 800212c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800212e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213a:	6999      	ldr	r1, [r3, #24]
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	ea40 0301 	orr.w	r3, r0, r1
 8002144:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4bc5      	ldr	r3, [pc, #788]	; (8002460 <UART_SetConfig+0x384>)
 800214c:	429a      	cmp	r2, r3
 800214e:	d004      	beq.n	800215a <UART_SetConfig+0x7e>
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4bc3      	ldr	r3, [pc, #780]	; (8002464 <UART_SetConfig+0x388>)
 8002156:	429a      	cmp	r2, r3
 8002158:	d103      	bne.n	8002162 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800215a:	f7ff fe5d 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 800215e:	6778      	str	r0, [r7, #116]	; 0x74
 8002160:	e002      	b.n	8002168 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002162:	f7ff fe45 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8002166:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002170:	f040 80b6 	bne.w	80022e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002176:	461c      	mov	r4, r3
 8002178:	f04f 0500 	mov.w	r5, #0
 800217c:	4622      	mov	r2, r4
 800217e:	462b      	mov	r3, r5
 8002180:	1891      	adds	r1, r2, r2
 8002182:	6439      	str	r1, [r7, #64]	; 0x40
 8002184:	415b      	adcs	r3, r3
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
 8002188:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800218c:	1912      	adds	r2, r2, r4
 800218e:	eb45 0303 	adc.w	r3, r5, r3
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	00d9      	lsls	r1, r3, #3
 800219c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a0:	00d0      	lsls	r0, r2, #3
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	1911      	adds	r1, r2, r4
 80021a8:	6639      	str	r1, [r7, #96]	; 0x60
 80021aa:	416b      	adcs	r3, r5
 80021ac:	667b      	str	r3, [r7, #100]	; 0x64
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	1891      	adds	r1, r2, r2
 80021ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80021bc:	415b      	adcs	r3, r3
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80021c8:	f7fe f882 	bl	80002d0 <__aeabi_uldivmod>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4ba5      	ldr	r3, [pc, #660]	; (8002468 <UART_SetConfig+0x38c>)
 80021d2:	fba3 2302 	umull	r2, r3, r3, r2
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	011e      	lsls	r6, r3, #4
 80021da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021dc:	461c      	mov	r4, r3
 80021de:	f04f 0500 	mov.w	r5, #0
 80021e2:	4622      	mov	r2, r4
 80021e4:	462b      	mov	r3, r5
 80021e6:	1891      	adds	r1, r2, r2
 80021e8:	6339      	str	r1, [r7, #48]	; 0x30
 80021ea:	415b      	adcs	r3, r3
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
 80021ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021f2:	1912      	adds	r2, r2, r4
 80021f4:	eb45 0303 	adc.w	r3, r5, r3
 80021f8:	f04f 0000 	mov.w	r0, #0
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	00d9      	lsls	r1, r3, #3
 8002202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002206:	00d0      	lsls	r0, r2, #3
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	1911      	adds	r1, r2, r4
 800220e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002210:	416b      	adcs	r3, r5
 8002212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	461a      	mov	r2, r3
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	1891      	adds	r1, r2, r2
 8002220:	62b9      	str	r1, [r7, #40]	; 0x28
 8002222:	415b      	adcs	r3, r3
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800222a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800222e:	f7fe f84f 	bl	80002d0 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4b8c      	ldr	r3, [pc, #560]	; (8002468 <UART_SetConfig+0x38c>)
 8002238:	fba3 1302 	umull	r1, r3, r3, r2
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	2164      	movs	r1, #100	; 0x64
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	3332      	adds	r3, #50	; 0x32
 800224a:	4a87      	ldr	r2, [pc, #540]	; (8002468 <UART_SetConfig+0x38c>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002258:	441e      	add	r6, r3
 800225a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800225c:	4618      	mov	r0, r3
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	1894      	adds	r4, r2, r2
 8002268:	623c      	str	r4, [r7, #32]
 800226a:	415b      	adcs	r3, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002272:	1812      	adds	r2, r2, r0
 8002274:	eb41 0303 	adc.w	r3, r1, r3
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	f04f 0500 	mov.w	r5, #0
 8002280:	00dd      	lsls	r5, r3, #3
 8002282:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002286:	00d4      	lsls	r4, r2, #3
 8002288:	4622      	mov	r2, r4
 800228a:	462b      	mov	r3, r5
 800228c:	1814      	adds	r4, r2, r0
 800228e:	653c      	str	r4, [r7, #80]	; 0x50
 8002290:	414b      	adcs	r3, r1
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
 8002294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	461a      	mov	r2, r3
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	1891      	adds	r1, r2, r2
 80022a0:	61b9      	str	r1, [r7, #24]
 80022a2:	415b      	adcs	r3, r3
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022ae:	f7fe f80f 	bl	80002d0 <__aeabi_uldivmod>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <UART_SetConfig+0x38c>)
 80022b8:	fba3 1302 	umull	r1, r3, r3, r2
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	2164      	movs	r1, #100	; 0x64
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	3332      	adds	r3, #50	; 0x32
 80022ca:	4a67      	ldr	r2, [pc, #412]	; (8002468 <UART_SetConfig+0x38c>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4432      	add	r2, r6
 80022dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022de:	e0b9      	b.n	8002454 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e2:	461c      	mov	r4, r3
 80022e4:	f04f 0500 	mov.w	r5, #0
 80022e8:	4622      	mov	r2, r4
 80022ea:	462b      	mov	r3, r5
 80022ec:	1891      	adds	r1, r2, r2
 80022ee:	6139      	str	r1, [r7, #16]
 80022f0:	415b      	adcs	r3, r3
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022f8:	1912      	adds	r2, r2, r4
 80022fa:	eb45 0303 	adc.w	r3, r5, r3
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	00d9      	lsls	r1, r3, #3
 8002308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800230c:	00d0      	lsls	r0, r2, #3
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	eb12 0804 	adds.w	r8, r2, r4
 8002316:	eb43 0905 	adc.w	r9, r3, r5
 800231a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f04f 0100 	mov.w	r1, #0
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	008b      	lsls	r3, r1, #2
 800232e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002332:	0082      	lsls	r2, r0, #2
 8002334:	4640      	mov	r0, r8
 8002336:	4649      	mov	r1, r9
 8002338:	f7fd ffca 	bl	80002d0 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4b49      	ldr	r3, [pc, #292]	; (8002468 <UART_SetConfig+0x38c>)
 8002342:	fba3 2302 	umull	r2, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	011e      	lsls	r6, r3, #4
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	4618      	mov	r0, r3
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	1894      	adds	r4, r2, r2
 8002358:	60bc      	str	r4, [r7, #8]
 800235a:	415b      	adcs	r3, r3
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002362:	1812      	adds	r2, r2, r0
 8002364:	eb41 0303 	adc.w	r3, r1, r3
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	f04f 0500 	mov.w	r5, #0
 8002370:	00dd      	lsls	r5, r3, #3
 8002372:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002376:	00d4      	lsls	r4, r2, #3
 8002378:	4622      	mov	r2, r4
 800237a:	462b      	mov	r3, r5
 800237c:	1814      	adds	r4, r2, r0
 800237e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002380:	414b      	adcs	r3, r1
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	008b      	lsls	r3, r1, #2
 8002398:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800239c:	0082      	lsls	r2, r0, #2
 800239e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023a2:	f7fd ff95 	bl	80002d0 <__aeabi_uldivmod>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <UART_SetConfig+0x38c>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	2164      	movs	r1, #100	; 0x64
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	3332      	adds	r3, #50	; 0x32
 80023be:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <UART_SetConfig+0x38c>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ca:	441e      	add	r6, r3
 80023cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ce:	4618      	mov	r0, r3
 80023d0:	f04f 0100 	mov.w	r1, #0
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	1894      	adds	r4, r2, r2
 80023da:	603c      	str	r4, [r7, #0]
 80023dc:	415b      	adcs	r3, r3
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e4:	1812      	adds	r2, r2, r0
 80023e6:	eb41 0303 	adc.w	r3, r1, r3
 80023ea:	f04f 0400 	mov.w	r4, #0
 80023ee:	f04f 0500 	mov.w	r5, #0
 80023f2:	00dd      	lsls	r5, r3, #3
 80023f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023f8:	00d4      	lsls	r4, r2, #3
 80023fa:	4622      	mov	r2, r4
 80023fc:	462b      	mov	r3, r5
 80023fe:	eb12 0a00 	adds.w	sl, r2, r0
 8002402:	eb43 0b01 	adc.w	fp, r3, r1
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	f04f 0100 	mov.w	r1, #0
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	008b      	lsls	r3, r1, #2
 800241a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800241e:	0082      	lsls	r2, r0, #2
 8002420:	4650      	mov	r0, sl
 8002422:	4659      	mov	r1, fp
 8002424:	f7fd ff54 	bl	80002d0 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <UART_SetConfig+0x38c>)
 800242e:	fba3 1302 	umull	r1, r3, r3, r2
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2164      	movs	r1, #100	; 0x64
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	3332      	adds	r3, #50	; 0x32
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <UART_SetConfig+0x38c>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4432      	add	r2, r6
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	377c      	adds	r7, #124	; 0x7c
 8002458:	46bd      	mov	sp, r7
 800245a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245e:	bf00      	nop
 8002460:	40011000 	.word	0x40011000
 8002464:	40011400 	.word	0x40011400
 8002468:	51eb851f 	.word	0x51eb851f

0800246c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800246c:	b084      	sub	sp, #16
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	f107 001c 	add.w	r0, r7, #28
 800247a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	2b01      	cmp	r3, #1
 8002482:	d122      	bne.n	80024ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa82 	bl	80029c8 <USB_CoreReset>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e01a      	b.n	8002500 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa76 	bl	80029c8 <USB_CoreReset>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80024e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
 80024f2:	e005      	b.n	8002500 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10b      	bne.n	800251e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f043 0206 	orr.w	r2, r3, #6
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800252a:	b004      	add	sp, #16
 800252c:	4770      	bx	lr

0800252e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 0201 	bic.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe fbfe 	bl	8000d80 <HAL_Delay>
      ms++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3301      	adds	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa0e 	bl	80029ac <USB_GetMode>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d01e      	beq.n	80025d4 <USB_SetCurrentMode+0x84>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b31      	cmp	r3, #49	; 0x31
 800259a:	d9f0      	bls.n	800257e <USB_SetCurrentMode+0x2e>
 800259c:	e01a      	b.n	80025d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d115      	bne.n	80025d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7fe fbe5 	bl	8000d80 <HAL_Delay>
      ms++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f9f5 	bl	80029ac <USB_GetMode>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <USB_SetCurrentMode+0x84>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b31      	cmp	r3, #49	; 0x31
 80025cc:	d9f0      	bls.n	80025b0 <USB_SetCurrentMode+0x60>
 80025ce:	e001      	b.n	80025d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e005      	b.n	80025e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b32      	cmp	r3, #50	; 0x32
 80025d8:	d101      	bne.n	80025de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80025e8:	b084      	sub	sp, #16
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80025f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	e009      	b.n	800261c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	3340      	adds	r3, #64	; 0x40
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	3301      	adds	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0e      	cmp	r3, #14
 8002620:	d9f2      	bls.n	8002608 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11c      	bne.n	8002662 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
 8002660:	e00b      	b.n	800267a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002680:	461a      	mov	r2, r3
 8002682:	2300      	movs	r3, #0
 8002684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268c:	4619      	mov	r1, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002694:	461a      	mov	r2, r3
 8002696:	680b      	ldr	r3, [r1, #0]
 8002698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10c      	bne.n	80026ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80026a6:	2100      	movs	r1, #0
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f945 	bl	8002938 <USB_SetDevSpeed>
 80026ae:	e008      	b.n	80026c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80026b0:	2101      	movs	r1, #1
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f940 	bl	8002938 <USB_SetDevSpeed>
 80026b8:	e003      	b.n	80026c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80026ba:	2103      	movs	r1, #3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f93b 	bl	8002938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80026c2:	2110      	movs	r1, #16
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8f3 	bl	80028b0 <USB_FlushTxFifo>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f90f 	bl	80028f8 <USB_FlushRxFifo>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f6:	461a      	mov	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002702:	461a      	mov	r2, r3
 8002704:	2300      	movs	r3, #0
 8002706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	e043      	b.n	8002796 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002724:	d118      	bne.n	8002758 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002738:	461a      	mov	r2, r3
 800273a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e013      	b.n	800276a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274e:	461a      	mov	r2, r3
 8002750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e008      	b.n	800276a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002764:	461a      	mov	r2, r3
 8002766:	2300      	movs	r3, #0
 8002768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002776:	461a      	mov	r2, r3
 8002778:	2300      	movs	r3, #0
 800277a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002788:	461a      	mov	r2, r3
 800278a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800278e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	3301      	adds	r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	429a      	cmp	r2, r3
 800279c:	d3b7      	bcc.n	800270e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	e043      	b.n	800282c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ba:	d118      	bne.n	80027ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ce:	461a      	mov	r2, r3
 80027d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e013      	b.n	8002800 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e008      	b.n	8002800 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	2300      	movs	r3, #0
 8002810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281e:	461a      	mov	r2, r3
 8002820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	3301      	adds	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3b7      	bcc.n	80027a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <USB_DevInit+0x2c4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f043 0208 	orr.w	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800289c:	7dfb      	ldrb	r3, [r7, #23]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028a8:	b004      	add	sp, #16
 80028aa:	4770      	bx	lr
 80028ac:	803c3800 	.word	0x803c3800

080028b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <USB_FlushTxFifo+0x44>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e006      	b.n	80028e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d0f1      	beq.n	80028ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	00030d40 	.word	0x00030d40

080028f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2210      	movs	r2, #16
 8002908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3301      	adds	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4a08      	ldr	r2, [pc, #32]	; (8002934 <USB_FlushRxFifo+0x3c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e006      	b.n	8002928 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b10      	cmp	r3, #16
 8002924:	d0f1      	beq.n	800290a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	00030d40 	.word	0x00030d40

08002938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	68f9      	ldr	r1, [r7, #12]
 8002954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0301 	and.w	r3, r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <USB_CoreReset+0x60>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e01a      	b.n	8002a1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	daf3      	bge.n	80029d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3301      	adds	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <USB_CoreReset+0x60>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e006      	b.n	8002a1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d0f1      	beq.n	80029fc <USB_CoreReset+0x34>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	00030d40 	.word	0x00030d40

08002a2c <__errno>:
 8002a2c:	4b01      	ldr	r3, [pc, #4]	; (8002a34 <__errno+0x8>)
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	2000000c 	.word	0x2000000c

08002a38 <__libc_init_array>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	4d0d      	ldr	r5, [pc, #52]	; (8002a70 <__libc_init_array+0x38>)
 8002a3c:	4c0d      	ldr	r4, [pc, #52]	; (8002a74 <__libc_init_array+0x3c>)
 8002a3e:	1b64      	subs	r4, r4, r5
 8002a40:	10a4      	asrs	r4, r4, #2
 8002a42:	2600      	movs	r6, #0
 8002a44:	42a6      	cmp	r6, r4
 8002a46:	d109      	bne.n	8002a5c <__libc_init_array+0x24>
 8002a48:	4d0b      	ldr	r5, [pc, #44]	; (8002a78 <__libc_init_array+0x40>)
 8002a4a:	4c0c      	ldr	r4, [pc, #48]	; (8002a7c <__libc_init_array+0x44>)
 8002a4c:	f000 fc4e 	bl	80032ec <_init>
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	2600      	movs	r6, #0
 8002a56:	42a6      	cmp	r6, r4
 8002a58:	d105      	bne.n	8002a66 <__libc_init_array+0x2e>
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a60:	4798      	blx	r3
 8002a62:	3601      	adds	r6, #1
 8002a64:	e7ee      	b.n	8002a44 <__libc_init_array+0xc>
 8002a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6a:	4798      	blx	r3
 8002a6c:	3601      	adds	r6, #1
 8002a6e:	e7f2      	b.n	8002a56 <__libc_init_array+0x1e>
 8002a70:	08003390 	.word	0x08003390
 8002a74:	08003390 	.word	0x08003390
 8002a78:	08003390 	.word	0x08003390
 8002a7c:	08003394 	.word	0x08003394

08002a80 <memset>:
 8002a80:	4402      	add	r2, r0
 8002a82:	4603      	mov	r3, r0
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d100      	bne.n	8002a8a <memset+0xa>
 8002a88:	4770      	bx	lr
 8002a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a8e:	e7f9      	b.n	8002a84 <memset+0x4>

08002a90 <siprintf>:
 8002a90:	b40e      	push	{r1, r2, r3}
 8002a92:	b500      	push	{lr}
 8002a94:	b09c      	sub	sp, #112	; 0x70
 8002a96:	ab1d      	add	r3, sp, #116	; 0x74
 8002a98:	9002      	str	r0, [sp, #8]
 8002a9a:	9006      	str	r0, [sp, #24]
 8002a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aa0:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <siprintf+0x38>)
 8002aa2:	9107      	str	r1, [sp, #28]
 8002aa4:	9104      	str	r1, [sp, #16]
 8002aa6:	4909      	ldr	r1, [pc, #36]	; (8002acc <siprintf+0x3c>)
 8002aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aac:	9105      	str	r1, [sp, #20]
 8002aae:	6800      	ldr	r0, [r0, #0]
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	a902      	add	r1, sp, #8
 8002ab4:	f000 f868 	bl	8002b88 <_svfiprintf_r>
 8002ab8:	9b02      	ldr	r3, [sp, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	b01c      	add	sp, #112	; 0x70
 8002ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ac4:	b003      	add	sp, #12
 8002ac6:	4770      	bx	lr
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	ffff0208 	.word	0xffff0208

08002ad0 <__ssputs_r>:
 8002ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad4:	688e      	ldr	r6, [r1, #8]
 8002ad6:	429e      	cmp	r6, r3
 8002ad8:	4682      	mov	sl, r0
 8002ada:	460c      	mov	r4, r1
 8002adc:	4690      	mov	r8, r2
 8002ade:	461f      	mov	r7, r3
 8002ae0:	d838      	bhi.n	8002b54 <__ssputs_r+0x84>
 8002ae2:	898a      	ldrh	r2, [r1, #12]
 8002ae4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ae8:	d032      	beq.n	8002b50 <__ssputs_r+0x80>
 8002aea:	6825      	ldr	r5, [r4, #0]
 8002aec:	6909      	ldr	r1, [r1, #16]
 8002aee:	eba5 0901 	sub.w	r9, r5, r1
 8002af2:	6965      	ldr	r5, [r4, #20]
 8002af4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002af8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002afc:	3301      	adds	r3, #1
 8002afe:	444b      	add	r3, r9
 8002b00:	106d      	asrs	r5, r5, #1
 8002b02:	429d      	cmp	r5, r3
 8002b04:	bf38      	it	cc
 8002b06:	461d      	movcc	r5, r3
 8002b08:	0553      	lsls	r3, r2, #21
 8002b0a:	d531      	bpl.n	8002b70 <__ssputs_r+0xa0>
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f000 fb47 	bl	80031a0 <_malloc_r>
 8002b12:	4606      	mov	r6, r0
 8002b14:	b950      	cbnz	r0, 8002b2c <__ssputs_r+0x5c>
 8002b16:	230c      	movs	r3, #12
 8002b18:	f8ca 3000 	str.w	r3, [sl]
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b22:	81a3      	strh	r3, [r4, #12]
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b2c:	6921      	ldr	r1, [r4, #16]
 8002b2e:	464a      	mov	r2, r9
 8002b30:	f000 fabe 	bl	80030b0 <memcpy>
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	81a3      	strh	r3, [r4, #12]
 8002b40:	6126      	str	r6, [r4, #16]
 8002b42:	6165      	str	r5, [r4, #20]
 8002b44:	444e      	add	r6, r9
 8002b46:	eba5 0509 	sub.w	r5, r5, r9
 8002b4a:	6026      	str	r6, [r4, #0]
 8002b4c:	60a5      	str	r5, [r4, #8]
 8002b4e:	463e      	mov	r6, r7
 8002b50:	42be      	cmp	r6, r7
 8002b52:	d900      	bls.n	8002b56 <__ssputs_r+0x86>
 8002b54:	463e      	mov	r6, r7
 8002b56:	4632      	mov	r2, r6
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	4641      	mov	r1, r8
 8002b5c:	f000 fab6 	bl	80030cc <memmove>
 8002b60:	68a3      	ldr	r3, [r4, #8]
 8002b62:	6822      	ldr	r2, [r4, #0]
 8002b64:	1b9b      	subs	r3, r3, r6
 8002b66:	4432      	add	r2, r6
 8002b68:	60a3      	str	r3, [r4, #8]
 8002b6a:	6022      	str	r2, [r4, #0]
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e7db      	b.n	8002b28 <__ssputs_r+0x58>
 8002b70:	462a      	mov	r2, r5
 8002b72:	f000 fb6f 	bl	8003254 <_realloc_r>
 8002b76:	4606      	mov	r6, r0
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d1e1      	bne.n	8002b40 <__ssputs_r+0x70>
 8002b7c:	6921      	ldr	r1, [r4, #16]
 8002b7e:	4650      	mov	r0, sl
 8002b80:	f000 fabe 	bl	8003100 <_free_r>
 8002b84:	e7c7      	b.n	8002b16 <__ssputs_r+0x46>
	...

08002b88 <_svfiprintf_r>:
 8002b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	898b      	ldrh	r3, [r1, #12]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	b09d      	sub	sp, #116	; 0x74
 8002b94:	4607      	mov	r7, r0
 8002b96:	460d      	mov	r5, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	d50e      	bpl.n	8002bba <_svfiprintf_r+0x32>
 8002b9c:	690b      	ldr	r3, [r1, #16]
 8002b9e:	b963      	cbnz	r3, 8002bba <_svfiprintf_r+0x32>
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	f000 fafd 	bl	80031a0 <_malloc_r>
 8002ba6:	6028      	str	r0, [r5, #0]
 8002ba8:	6128      	str	r0, [r5, #16]
 8002baa:	b920      	cbnz	r0, 8002bb6 <_svfiprintf_r+0x2e>
 8002bac:	230c      	movs	r3, #12
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb4:	e0d1      	b.n	8002d5a <_svfiprintf_r+0x1d2>
 8002bb6:	2340      	movs	r3, #64	; 0x40
 8002bb8:	616b      	str	r3, [r5, #20]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bc8:	2330      	movs	r3, #48	; 0x30
 8002bca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002d74 <_svfiprintf_r+0x1ec>
 8002bce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bd2:	f04f 0901 	mov.w	r9, #1
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	469a      	mov	sl, r3
 8002bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bde:	b10a      	cbz	r2, 8002be4 <_svfiprintf_r+0x5c>
 8002be0:	2a25      	cmp	r2, #37	; 0x25
 8002be2:	d1f9      	bne.n	8002bd8 <_svfiprintf_r+0x50>
 8002be4:	ebba 0b04 	subs.w	fp, sl, r4
 8002be8:	d00b      	beq.n	8002c02 <_svfiprintf_r+0x7a>
 8002bea:	465b      	mov	r3, fp
 8002bec:	4622      	mov	r2, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	f7ff ff6d 	bl	8002ad0 <__ssputs_r>
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	f000 80aa 	beq.w	8002d50 <_svfiprintf_r+0x1c8>
 8002bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bfe:	445a      	add	r2, fp
 8002c00:	9209      	str	r2, [sp, #36]	; 0x24
 8002c02:	f89a 3000 	ldrb.w	r3, [sl]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a2 	beq.w	8002d50 <_svfiprintf_r+0x1c8>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c16:	f10a 0a01 	add.w	sl, sl, #1
 8002c1a:	9304      	str	r3, [sp, #16]
 8002c1c:	9307      	str	r3, [sp, #28]
 8002c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c22:	931a      	str	r3, [sp, #104]	; 0x68
 8002c24:	4654      	mov	r4, sl
 8002c26:	2205      	movs	r2, #5
 8002c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c2c:	4851      	ldr	r0, [pc, #324]	; (8002d74 <_svfiprintf_r+0x1ec>)
 8002c2e:	f7fd faff 	bl	8000230 <memchr>
 8002c32:	9a04      	ldr	r2, [sp, #16]
 8002c34:	b9d8      	cbnz	r0, 8002c6e <_svfiprintf_r+0xe6>
 8002c36:	06d0      	lsls	r0, r2, #27
 8002c38:	bf44      	itt	mi
 8002c3a:	2320      	movmi	r3, #32
 8002c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c40:	0711      	lsls	r1, r2, #28
 8002c42:	bf44      	itt	mi
 8002c44:	232b      	movmi	r3, #43	; 0x2b
 8002c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c50:	d015      	beq.n	8002c7e <_svfiprintf_r+0xf6>
 8002c52:	9a07      	ldr	r2, [sp, #28]
 8002c54:	4654      	mov	r4, sl
 8002c56:	2000      	movs	r0, #0
 8002c58:	f04f 0c0a 	mov.w	ip, #10
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c62:	3b30      	subs	r3, #48	; 0x30
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d94e      	bls.n	8002d06 <_svfiprintf_r+0x17e>
 8002c68:	b1b0      	cbz	r0, 8002c98 <_svfiprintf_r+0x110>
 8002c6a:	9207      	str	r2, [sp, #28]
 8002c6c:	e014      	b.n	8002c98 <_svfiprintf_r+0x110>
 8002c6e:	eba0 0308 	sub.w	r3, r0, r8
 8002c72:	fa09 f303 	lsl.w	r3, r9, r3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	9304      	str	r3, [sp, #16]
 8002c7a:	46a2      	mov	sl, r4
 8002c7c:	e7d2      	b.n	8002c24 <_svfiprintf_r+0x9c>
 8002c7e:	9b03      	ldr	r3, [sp, #12]
 8002c80:	1d19      	adds	r1, r3, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	9103      	str	r1, [sp, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bfbb      	ittet	lt
 8002c8a:	425b      	neglt	r3, r3
 8002c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002c90:	9307      	strge	r3, [sp, #28]
 8002c92:	9307      	strlt	r3, [sp, #28]
 8002c94:	bfb8      	it	lt
 8002c96:	9204      	strlt	r2, [sp, #16]
 8002c98:	7823      	ldrb	r3, [r4, #0]
 8002c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c9c:	d10c      	bne.n	8002cb8 <_svfiprintf_r+0x130>
 8002c9e:	7863      	ldrb	r3, [r4, #1]
 8002ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca2:	d135      	bne.n	8002d10 <_svfiprintf_r+0x188>
 8002ca4:	9b03      	ldr	r3, [sp, #12]
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	9203      	str	r2, [sp, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bfb8      	it	lt
 8002cb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002cb4:	3402      	adds	r4, #2
 8002cb6:	9305      	str	r3, [sp, #20]
 8002cb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d84 <_svfiprintf_r+0x1fc>
 8002cbc:	7821      	ldrb	r1, [r4, #0]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4650      	mov	r0, sl
 8002cc2:	f7fd fab5 	bl	8000230 <memchr>
 8002cc6:	b140      	cbz	r0, 8002cda <_svfiprintf_r+0x152>
 8002cc8:	2340      	movs	r3, #64	; 0x40
 8002cca:	eba0 000a 	sub.w	r0, r0, sl
 8002cce:	fa03 f000 	lsl.w	r0, r3, r0
 8002cd2:	9b04      	ldr	r3, [sp, #16]
 8002cd4:	4303      	orrs	r3, r0
 8002cd6:	3401      	adds	r4, #1
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cde:	4826      	ldr	r0, [pc, #152]	; (8002d78 <_svfiprintf_r+0x1f0>)
 8002ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ce4:	2206      	movs	r2, #6
 8002ce6:	f7fd faa3 	bl	8000230 <memchr>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d038      	beq.n	8002d60 <_svfiprintf_r+0x1d8>
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <_svfiprintf_r+0x1f4>)
 8002cf0:	bb1b      	cbnz	r3, 8002d3a <_svfiprintf_r+0x1b2>
 8002cf2:	9b03      	ldr	r3, [sp, #12]
 8002cf4:	3307      	adds	r3, #7
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d00:	4433      	add	r3, r6
 8002d02:	9309      	str	r3, [sp, #36]	; 0x24
 8002d04:	e767      	b.n	8002bd6 <_svfiprintf_r+0x4e>
 8002d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	e7a5      	b.n	8002c5c <_svfiprintf_r+0xd4>
 8002d10:	2300      	movs	r3, #0
 8002d12:	3401      	adds	r4, #1
 8002d14:	9305      	str	r3, [sp, #20]
 8002d16:	4619      	mov	r1, r3
 8002d18:	f04f 0c0a 	mov.w	ip, #10
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d22:	3a30      	subs	r2, #48	; 0x30
 8002d24:	2a09      	cmp	r2, #9
 8002d26:	d903      	bls.n	8002d30 <_svfiprintf_r+0x1a8>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0c5      	beq.n	8002cb8 <_svfiprintf_r+0x130>
 8002d2c:	9105      	str	r1, [sp, #20]
 8002d2e:	e7c3      	b.n	8002cb8 <_svfiprintf_r+0x130>
 8002d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d34:	4604      	mov	r4, r0
 8002d36:	2301      	movs	r3, #1
 8002d38:	e7f0      	b.n	8002d1c <_svfiprintf_r+0x194>
 8002d3a:	ab03      	add	r3, sp, #12
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	462a      	mov	r2, r5
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <_svfiprintf_r+0x1f8>)
 8002d42:	a904      	add	r1, sp, #16
 8002d44:	4638      	mov	r0, r7
 8002d46:	f3af 8000 	nop.w
 8002d4a:	1c42      	adds	r2, r0, #1
 8002d4c:	4606      	mov	r6, r0
 8002d4e:	d1d6      	bne.n	8002cfe <_svfiprintf_r+0x176>
 8002d50:	89ab      	ldrh	r3, [r5, #12]
 8002d52:	065b      	lsls	r3, r3, #25
 8002d54:	f53f af2c 	bmi.w	8002bb0 <_svfiprintf_r+0x28>
 8002d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d5a:	b01d      	add	sp, #116	; 0x74
 8002d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d60:	ab03      	add	r3, sp, #12
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	462a      	mov	r2, r5
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <_svfiprintf_r+0x1f8>)
 8002d68:	a904      	add	r1, sp, #16
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	f000 f87a 	bl	8002e64 <_printf_i>
 8002d70:	e7eb      	b.n	8002d4a <_svfiprintf_r+0x1c2>
 8002d72:	bf00      	nop
 8002d74:	08003354 	.word	0x08003354
 8002d78:	0800335e 	.word	0x0800335e
 8002d7c:	00000000 	.word	0x00000000
 8002d80:	08002ad1 	.word	0x08002ad1
 8002d84:	0800335a 	.word	0x0800335a

08002d88 <_printf_common>:
 8002d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d8c:	4616      	mov	r6, r2
 8002d8e:	4699      	mov	r9, r3
 8002d90:	688a      	ldr	r2, [r1, #8]
 8002d92:	690b      	ldr	r3, [r1, #16]
 8002d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bfb8      	it	lt
 8002d9c:	4613      	movlt	r3, r2
 8002d9e:	6033      	str	r3, [r6, #0]
 8002da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002da4:	4607      	mov	r7, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	b10a      	cbz	r2, 8002dae <_printf_common+0x26>
 8002daa:	3301      	adds	r3, #1
 8002dac:	6033      	str	r3, [r6, #0]
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	0699      	lsls	r1, r3, #26
 8002db2:	bf42      	ittt	mi
 8002db4:	6833      	ldrmi	r3, [r6, #0]
 8002db6:	3302      	addmi	r3, #2
 8002db8:	6033      	strmi	r3, [r6, #0]
 8002dba:	6825      	ldr	r5, [r4, #0]
 8002dbc:	f015 0506 	ands.w	r5, r5, #6
 8002dc0:	d106      	bne.n	8002dd0 <_printf_common+0x48>
 8002dc2:	f104 0a19 	add.w	sl, r4, #25
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	6832      	ldr	r2, [r6, #0]
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	42ab      	cmp	r3, r5
 8002dce:	dc26      	bgt.n	8002e1e <_printf_common+0x96>
 8002dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dd4:	1e13      	subs	r3, r2, #0
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	bf18      	it	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	0692      	lsls	r2, r2, #26
 8002dde:	d42b      	bmi.n	8002e38 <_printf_common+0xb0>
 8002de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002de4:	4649      	mov	r1, r9
 8002de6:	4638      	mov	r0, r7
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d01e      	beq.n	8002e2c <_printf_common+0xa4>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	68e5      	ldr	r5, [r4, #12]
 8002df2:	6832      	ldr	r2, [r6, #0]
 8002df4:	f003 0306 	and.w	r3, r3, #6
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	bf08      	it	eq
 8002dfc:	1aad      	subeq	r5, r5, r2
 8002dfe:	68a3      	ldr	r3, [r4, #8]
 8002e00:	6922      	ldr	r2, [r4, #16]
 8002e02:	bf0c      	ite	eq
 8002e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e08:	2500      	movne	r5, #0
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	bfc4      	itt	gt
 8002e0e:	1a9b      	subgt	r3, r3, r2
 8002e10:	18ed      	addgt	r5, r5, r3
 8002e12:	2600      	movs	r6, #0
 8002e14:	341a      	adds	r4, #26
 8002e16:	42b5      	cmp	r5, r6
 8002e18:	d11a      	bne.n	8002e50 <_printf_common+0xc8>
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e008      	b.n	8002e30 <_printf_common+0xa8>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	4652      	mov	r2, sl
 8002e22:	4649      	mov	r1, r9
 8002e24:	4638      	mov	r0, r7
 8002e26:	47c0      	blx	r8
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d103      	bne.n	8002e34 <_printf_common+0xac>
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e34:	3501      	adds	r5, #1
 8002e36:	e7c6      	b.n	8002dc6 <_printf_common+0x3e>
 8002e38:	18e1      	adds	r1, r4, r3
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	2030      	movs	r0, #48	; 0x30
 8002e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e42:	4422      	add	r2, r4
 8002e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	e7c7      	b.n	8002de0 <_printf_common+0x58>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4622      	mov	r2, r4
 8002e54:	4649      	mov	r1, r9
 8002e56:	4638      	mov	r0, r7
 8002e58:	47c0      	blx	r8
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d0e6      	beq.n	8002e2c <_printf_common+0xa4>
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7d9      	b.n	8002e16 <_printf_common+0x8e>
	...

08002e64 <_printf_i>:
 8002e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	460c      	mov	r4, r1
 8002e6a:	4691      	mov	r9, r2
 8002e6c:	7e27      	ldrb	r7, [r4, #24]
 8002e6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e70:	2f78      	cmp	r7, #120	; 0x78
 8002e72:	4680      	mov	r8, r0
 8002e74:	469a      	mov	sl, r3
 8002e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e7a:	d807      	bhi.n	8002e8c <_printf_i+0x28>
 8002e7c:	2f62      	cmp	r7, #98	; 0x62
 8002e7e:	d80a      	bhi.n	8002e96 <_printf_i+0x32>
 8002e80:	2f00      	cmp	r7, #0
 8002e82:	f000 80d8 	beq.w	8003036 <_printf_i+0x1d2>
 8002e86:	2f58      	cmp	r7, #88	; 0x58
 8002e88:	f000 80a3 	beq.w	8002fd2 <_printf_i+0x16e>
 8002e8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e94:	e03a      	b.n	8002f0c <_printf_i+0xa8>
 8002e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e9a:	2b15      	cmp	r3, #21
 8002e9c:	d8f6      	bhi.n	8002e8c <_printf_i+0x28>
 8002e9e:	a001      	add	r0, pc, #4	; (adr r0, 8002ea4 <_printf_i+0x40>)
 8002ea0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ea4:	08002efd 	.word	0x08002efd
 8002ea8:	08002f11 	.word	0x08002f11
 8002eac:	08002e8d 	.word	0x08002e8d
 8002eb0:	08002e8d 	.word	0x08002e8d
 8002eb4:	08002e8d 	.word	0x08002e8d
 8002eb8:	08002e8d 	.word	0x08002e8d
 8002ebc:	08002f11 	.word	0x08002f11
 8002ec0:	08002e8d 	.word	0x08002e8d
 8002ec4:	08002e8d 	.word	0x08002e8d
 8002ec8:	08002e8d 	.word	0x08002e8d
 8002ecc:	08002e8d 	.word	0x08002e8d
 8002ed0:	0800301d 	.word	0x0800301d
 8002ed4:	08002f41 	.word	0x08002f41
 8002ed8:	08002fff 	.word	0x08002fff
 8002edc:	08002e8d 	.word	0x08002e8d
 8002ee0:	08002e8d 	.word	0x08002e8d
 8002ee4:	0800303f 	.word	0x0800303f
 8002ee8:	08002e8d 	.word	0x08002e8d
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002e8d 	.word	0x08002e8d
 8002ef4:	08002e8d 	.word	0x08002e8d
 8002ef8:	08003007 	.word	0x08003007
 8002efc:	680b      	ldr	r3, [r1, #0]
 8002efe:	1d1a      	adds	r2, r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	600a      	str	r2, [r1, #0]
 8002f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0a3      	b.n	8003058 <_printf_i+0x1f4>
 8002f10:	6825      	ldr	r5, [r4, #0]
 8002f12:	6808      	ldr	r0, [r1, #0]
 8002f14:	062e      	lsls	r6, r5, #24
 8002f16:	f100 0304 	add.w	r3, r0, #4
 8002f1a:	d50a      	bpl.n	8002f32 <_printf_i+0xce>
 8002f1c:	6805      	ldr	r5, [r0, #0]
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	da03      	bge.n	8002f2c <_printf_i+0xc8>
 8002f24:	232d      	movs	r3, #45	; 0x2d
 8002f26:	426d      	negs	r5, r5
 8002f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f2c:	485e      	ldr	r0, [pc, #376]	; (80030a8 <_printf_i+0x244>)
 8002f2e:	230a      	movs	r3, #10
 8002f30:	e019      	b.n	8002f66 <_printf_i+0x102>
 8002f32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f36:	6805      	ldr	r5, [r0, #0]
 8002f38:	600b      	str	r3, [r1, #0]
 8002f3a:	bf18      	it	ne
 8002f3c:	b22d      	sxthne	r5, r5
 8002f3e:	e7ef      	b.n	8002f20 <_printf_i+0xbc>
 8002f40:	680b      	ldr	r3, [r1, #0]
 8002f42:	6825      	ldr	r5, [r4, #0]
 8002f44:	1d18      	adds	r0, r3, #4
 8002f46:	6008      	str	r0, [r1, #0]
 8002f48:	0628      	lsls	r0, r5, #24
 8002f4a:	d501      	bpl.n	8002f50 <_printf_i+0xec>
 8002f4c:	681d      	ldr	r5, [r3, #0]
 8002f4e:	e002      	b.n	8002f56 <_printf_i+0xf2>
 8002f50:	0669      	lsls	r1, r5, #25
 8002f52:	d5fb      	bpl.n	8002f4c <_printf_i+0xe8>
 8002f54:	881d      	ldrh	r5, [r3, #0]
 8002f56:	4854      	ldr	r0, [pc, #336]	; (80030a8 <_printf_i+0x244>)
 8002f58:	2f6f      	cmp	r7, #111	; 0x6f
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2308      	moveq	r3, #8
 8002f5e:	230a      	movne	r3, #10
 8002f60:	2100      	movs	r1, #0
 8002f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f66:	6866      	ldr	r6, [r4, #4]
 8002f68:	60a6      	str	r6, [r4, #8]
 8002f6a:	2e00      	cmp	r6, #0
 8002f6c:	bfa2      	ittt	ge
 8002f6e:	6821      	ldrge	r1, [r4, #0]
 8002f70:	f021 0104 	bicge.w	r1, r1, #4
 8002f74:	6021      	strge	r1, [r4, #0]
 8002f76:	b90d      	cbnz	r5, 8002f7c <_printf_i+0x118>
 8002f78:	2e00      	cmp	r6, #0
 8002f7a:	d04d      	beq.n	8003018 <_printf_i+0x1b4>
 8002f7c:	4616      	mov	r6, r2
 8002f7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f82:	fb03 5711 	mls	r7, r3, r1, r5
 8002f86:	5dc7      	ldrb	r7, [r0, r7]
 8002f88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f8c:	462f      	mov	r7, r5
 8002f8e:	42bb      	cmp	r3, r7
 8002f90:	460d      	mov	r5, r1
 8002f92:	d9f4      	bls.n	8002f7e <_printf_i+0x11a>
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d10b      	bne.n	8002fb0 <_printf_i+0x14c>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	07df      	lsls	r7, r3, #31
 8002f9c:	d508      	bpl.n	8002fb0 <_printf_i+0x14c>
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	6861      	ldr	r1, [r4, #4]
 8002fa2:	4299      	cmp	r1, r3
 8002fa4:	bfde      	ittt	le
 8002fa6:	2330      	movle	r3, #48	; 0x30
 8002fa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002fb0:	1b92      	subs	r2, r2, r6
 8002fb2:	6122      	str	r2, [r4, #16]
 8002fb4:	f8cd a000 	str.w	sl, [sp]
 8002fb8:	464b      	mov	r3, r9
 8002fba:	aa03      	add	r2, sp, #12
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	f7ff fee2 	bl	8002d88 <_printf_common>
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d14c      	bne.n	8003062 <_printf_i+0x1fe>
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fcc:	b004      	add	sp, #16
 8002fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd2:	4835      	ldr	r0, [pc, #212]	; (80030a8 <_printf_i+0x244>)
 8002fd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	680e      	ldr	r6, [r1, #0]
 8002fdc:	061f      	lsls	r7, r3, #24
 8002fde:	f856 5b04 	ldr.w	r5, [r6], #4
 8002fe2:	600e      	str	r6, [r1, #0]
 8002fe4:	d514      	bpl.n	8003010 <_printf_i+0x1ac>
 8002fe6:	07d9      	lsls	r1, r3, #31
 8002fe8:	bf44      	itt	mi
 8002fea:	f043 0320 	orrmi.w	r3, r3, #32
 8002fee:	6023      	strmi	r3, [r4, #0]
 8002ff0:	b91d      	cbnz	r5, 8002ffa <_printf_i+0x196>
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	f023 0320 	bic.w	r3, r3, #32
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	e7b0      	b.n	8002f60 <_printf_i+0xfc>
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	f043 0320 	orr.w	r3, r3, #32
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	2378      	movs	r3, #120	; 0x78
 8003008:	4828      	ldr	r0, [pc, #160]	; (80030ac <_printf_i+0x248>)
 800300a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800300e:	e7e3      	b.n	8002fd8 <_printf_i+0x174>
 8003010:	065e      	lsls	r6, r3, #25
 8003012:	bf48      	it	mi
 8003014:	b2ad      	uxthmi	r5, r5
 8003016:	e7e6      	b.n	8002fe6 <_printf_i+0x182>
 8003018:	4616      	mov	r6, r2
 800301a:	e7bb      	b.n	8002f94 <_printf_i+0x130>
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	6826      	ldr	r6, [r4, #0]
 8003020:	6960      	ldr	r0, [r4, #20]
 8003022:	1d1d      	adds	r5, r3, #4
 8003024:	600d      	str	r5, [r1, #0]
 8003026:	0635      	lsls	r5, r6, #24
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	d501      	bpl.n	8003030 <_printf_i+0x1cc>
 800302c:	6018      	str	r0, [r3, #0]
 800302e:	e002      	b.n	8003036 <_printf_i+0x1d2>
 8003030:	0671      	lsls	r1, r6, #25
 8003032:	d5fb      	bpl.n	800302c <_printf_i+0x1c8>
 8003034:	8018      	strh	r0, [r3, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	6123      	str	r3, [r4, #16]
 800303a:	4616      	mov	r6, r2
 800303c:	e7ba      	b.n	8002fb4 <_printf_i+0x150>
 800303e:	680b      	ldr	r3, [r1, #0]
 8003040:	1d1a      	adds	r2, r3, #4
 8003042:	600a      	str	r2, [r1, #0]
 8003044:	681e      	ldr	r6, [r3, #0]
 8003046:	6862      	ldr	r2, [r4, #4]
 8003048:	2100      	movs	r1, #0
 800304a:	4630      	mov	r0, r6
 800304c:	f7fd f8f0 	bl	8000230 <memchr>
 8003050:	b108      	cbz	r0, 8003056 <_printf_i+0x1f2>
 8003052:	1b80      	subs	r0, r0, r6
 8003054:	6060      	str	r0, [r4, #4]
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	6123      	str	r3, [r4, #16]
 800305a:	2300      	movs	r3, #0
 800305c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003060:	e7a8      	b.n	8002fb4 <_printf_i+0x150>
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	4632      	mov	r2, r6
 8003066:	4649      	mov	r1, r9
 8003068:	4640      	mov	r0, r8
 800306a:	47d0      	blx	sl
 800306c:	3001      	adds	r0, #1
 800306e:	d0ab      	beq.n	8002fc8 <_printf_i+0x164>
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	079b      	lsls	r3, r3, #30
 8003074:	d413      	bmi.n	800309e <_printf_i+0x23a>
 8003076:	68e0      	ldr	r0, [r4, #12]
 8003078:	9b03      	ldr	r3, [sp, #12]
 800307a:	4298      	cmp	r0, r3
 800307c:	bfb8      	it	lt
 800307e:	4618      	movlt	r0, r3
 8003080:	e7a4      	b.n	8002fcc <_printf_i+0x168>
 8003082:	2301      	movs	r3, #1
 8003084:	4632      	mov	r2, r6
 8003086:	4649      	mov	r1, r9
 8003088:	4640      	mov	r0, r8
 800308a:	47d0      	blx	sl
 800308c:	3001      	adds	r0, #1
 800308e:	d09b      	beq.n	8002fc8 <_printf_i+0x164>
 8003090:	3501      	adds	r5, #1
 8003092:	68e3      	ldr	r3, [r4, #12]
 8003094:	9903      	ldr	r1, [sp, #12]
 8003096:	1a5b      	subs	r3, r3, r1
 8003098:	42ab      	cmp	r3, r5
 800309a:	dcf2      	bgt.n	8003082 <_printf_i+0x21e>
 800309c:	e7eb      	b.n	8003076 <_printf_i+0x212>
 800309e:	2500      	movs	r5, #0
 80030a0:	f104 0619 	add.w	r6, r4, #25
 80030a4:	e7f5      	b.n	8003092 <_printf_i+0x22e>
 80030a6:	bf00      	nop
 80030a8:	08003365 	.word	0x08003365
 80030ac:	08003376 	.word	0x08003376

080030b0 <memcpy>:
 80030b0:	440a      	add	r2, r1
 80030b2:	4291      	cmp	r1, r2
 80030b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80030b8:	d100      	bne.n	80030bc <memcpy+0xc>
 80030ba:	4770      	bx	lr
 80030bc:	b510      	push	{r4, lr}
 80030be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030c6:	4291      	cmp	r1, r2
 80030c8:	d1f9      	bne.n	80030be <memcpy+0xe>
 80030ca:	bd10      	pop	{r4, pc}

080030cc <memmove>:
 80030cc:	4288      	cmp	r0, r1
 80030ce:	b510      	push	{r4, lr}
 80030d0:	eb01 0402 	add.w	r4, r1, r2
 80030d4:	d902      	bls.n	80030dc <memmove+0x10>
 80030d6:	4284      	cmp	r4, r0
 80030d8:	4623      	mov	r3, r4
 80030da:	d807      	bhi.n	80030ec <memmove+0x20>
 80030dc:	1e43      	subs	r3, r0, #1
 80030de:	42a1      	cmp	r1, r4
 80030e0:	d008      	beq.n	80030f4 <memmove+0x28>
 80030e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030ea:	e7f8      	b.n	80030de <memmove+0x12>
 80030ec:	4402      	add	r2, r0
 80030ee:	4601      	mov	r1, r0
 80030f0:	428a      	cmp	r2, r1
 80030f2:	d100      	bne.n	80030f6 <memmove+0x2a>
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030fe:	e7f7      	b.n	80030f0 <memmove+0x24>

08003100 <_free_r>:
 8003100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003102:	2900      	cmp	r1, #0
 8003104:	d048      	beq.n	8003198 <_free_r+0x98>
 8003106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800310a:	9001      	str	r0, [sp, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f1a1 0404 	sub.w	r4, r1, #4
 8003112:	bfb8      	it	lt
 8003114:	18e4      	addlt	r4, r4, r3
 8003116:	f000 f8d3 	bl	80032c0 <__malloc_lock>
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <_free_r+0x9c>)
 800311c:	9801      	ldr	r0, [sp, #4]
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	4615      	mov	r5, r2
 8003122:	b933      	cbnz	r3, 8003132 <_free_r+0x32>
 8003124:	6063      	str	r3, [r4, #4]
 8003126:	6014      	str	r4, [r2, #0]
 8003128:	b003      	add	sp, #12
 800312a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800312e:	f000 b8cd 	b.w	80032cc <__malloc_unlock>
 8003132:	42a3      	cmp	r3, r4
 8003134:	d90b      	bls.n	800314e <_free_r+0x4e>
 8003136:	6821      	ldr	r1, [r4, #0]
 8003138:	1862      	adds	r2, r4, r1
 800313a:	4293      	cmp	r3, r2
 800313c:	bf04      	itt	eq
 800313e:	681a      	ldreq	r2, [r3, #0]
 8003140:	685b      	ldreq	r3, [r3, #4]
 8003142:	6063      	str	r3, [r4, #4]
 8003144:	bf04      	itt	eq
 8003146:	1852      	addeq	r2, r2, r1
 8003148:	6022      	streq	r2, [r4, #0]
 800314a:	602c      	str	r4, [r5, #0]
 800314c:	e7ec      	b.n	8003128 <_free_r+0x28>
 800314e:	461a      	mov	r2, r3
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	b10b      	cbz	r3, 8003158 <_free_r+0x58>
 8003154:	42a3      	cmp	r3, r4
 8003156:	d9fa      	bls.n	800314e <_free_r+0x4e>
 8003158:	6811      	ldr	r1, [r2, #0]
 800315a:	1855      	adds	r5, r2, r1
 800315c:	42a5      	cmp	r5, r4
 800315e:	d10b      	bne.n	8003178 <_free_r+0x78>
 8003160:	6824      	ldr	r4, [r4, #0]
 8003162:	4421      	add	r1, r4
 8003164:	1854      	adds	r4, r2, r1
 8003166:	42a3      	cmp	r3, r4
 8003168:	6011      	str	r1, [r2, #0]
 800316a:	d1dd      	bne.n	8003128 <_free_r+0x28>
 800316c:	681c      	ldr	r4, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	6053      	str	r3, [r2, #4]
 8003172:	4421      	add	r1, r4
 8003174:	6011      	str	r1, [r2, #0]
 8003176:	e7d7      	b.n	8003128 <_free_r+0x28>
 8003178:	d902      	bls.n	8003180 <_free_r+0x80>
 800317a:	230c      	movs	r3, #12
 800317c:	6003      	str	r3, [r0, #0]
 800317e:	e7d3      	b.n	8003128 <_free_r+0x28>
 8003180:	6825      	ldr	r5, [r4, #0]
 8003182:	1961      	adds	r1, r4, r5
 8003184:	428b      	cmp	r3, r1
 8003186:	bf04      	itt	eq
 8003188:	6819      	ldreq	r1, [r3, #0]
 800318a:	685b      	ldreq	r3, [r3, #4]
 800318c:	6063      	str	r3, [r4, #4]
 800318e:	bf04      	itt	eq
 8003190:	1949      	addeq	r1, r1, r5
 8003192:	6021      	streq	r1, [r4, #0]
 8003194:	6054      	str	r4, [r2, #4]
 8003196:	e7c7      	b.n	8003128 <_free_r+0x28>
 8003198:	b003      	add	sp, #12
 800319a:	bd30      	pop	{r4, r5, pc}
 800319c:	20000090 	.word	0x20000090

080031a0 <_malloc_r>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	1ccd      	adds	r5, r1, #3
 80031a4:	f025 0503 	bic.w	r5, r5, #3
 80031a8:	3508      	adds	r5, #8
 80031aa:	2d0c      	cmp	r5, #12
 80031ac:	bf38      	it	cc
 80031ae:	250c      	movcc	r5, #12
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	4606      	mov	r6, r0
 80031b4:	db01      	blt.n	80031ba <_malloc_r+0x1a>
 80031b6:	42a9      	cmp	r1, r5
 80031b8:	d903      	bls.n	80031c2 <_malloc_r+0x22>
 80031ba:	230c      	movs	r3, #12
 80031bc:	6033      	str	r3, [r6, #0]
 80031be:	2000      	movs	r0, #0
 80031c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c2:	f000 f87d 	bl	80032c0 <__malloc_lock>
 80031c6:	4921      	ldr	r1, [pc, #132]	; (800324c <_malloc_r+0xac>)
 80031c8:	680a      	ldr	r2, [r1, #0]
 80031ca:	4614      	mov	r4, r2
 80031cc:	b99c      	cbnz	r4, 80031f6 <_malloc_r+0x56>
 80031ce:	4f20      	ldr	r7, [pc, #128]	; (8003250 <_malloc_r+0xb0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b923      	cbnz	r3, 80031de <_malloc_r+0x3e>
 80031d4:	4621      	mov	r1, r4
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f862 	bl	80032a0 <_sbrk_r>
 80031dc:	6038      	str	r0, [r7, #0]
 80031de:	4629      	mov	r1, r5
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 f85d 	bl	80032a0 <_sbrk_r>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	d123      	bne.n	8003232 <_malloc_r+0x92>
 80031ea:	230c      	movs	r3, #12
 80031ec:	6033      	str	r3, [r6, #0]
 80031ee:	4630      	mov	r0, r6
 80031f0:	f000 f86c 	bl	80032cc <__malloc_unlock>
 80031f4:	e7e3      	b.n	80031be <_malloc_r+0x1e>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	1b5b      	subs	r3, r3, r5
 80031fa:	d417      	bmi.n	800322c <_malloc_r+0x8c>
 80031fc:	2b0b      	cmp	r3, #11
 80031fe:	d903      	bls.n	8003208 <_malloc_r+0x68>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	441c      	add	r4, r3
 8003204:	6025      	str	r5, [r4, #0]
 8003206:	e004      	b.n	8003212 <_malloc_r+0x72>
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	42a2      	cmp	r2, r4
 800320c:	bf0c      	ite	eq
 800320e:	600b      	streq	r3, [r1, #0]
 8003210:	6053      	strne	r3, [r2, #4]
 8003212:	4630      	mov	r0, r6
 8003214:	f000 f85a 	bl	80032cc <__malloc_unlock>
 8003218:	f104 000b 	add.w	r0, r4, #11
 800321c:	1d23      	adds	r3, r4, #4
 800321e:	f020 0007 	bic.w	r0, r0, #7
 8003222:	1ac2      	subs	r2, r0, r3
 8003224:	d0cc      	beq.n	80031c0 <_malloc_r+0x20>
 8003226:	1a1b      	subs	r3, r3, r0
 8003228:	50a3      	str	r3, [r4, r2]
 800322a:	e7c9      	b.n	80031c0 <_malloc_r+0x20>
 800322c:	4622      	mov	r2, r4
 800322e:	6864      	ldr	r4, [r4, #4]
 8003230:	e7cc      	b.n	80031cc <_malloc_r+0x2c>
 8003232:	1cc4      	adds	r4, r0, #3
 8003234:	f024 0403 	bic.w	r4, r4, #3
 8003238:	42a0      	cmp	r0, r4
 800323a:	d0e3      	beq.n	8003204 <_malloc_r+0x64>
 800323c:	1a21      	subs	r1, r4, r0
 800323e:	4630      	mov	r0, r6
 8003240:	f000 f82e 	bl	80032a0 <_sbrk_r>
 8003244:	3001      	adds	r0, #1
 8003246:	d1dd      	bne.n	8003204 <_malloc_r+0x64>
 8003248:	e7cf      	b.n	80031ea <_malloc_r+0x4a>
 800324a:	bf00      	nop
 800324c:	20000090 	.word	0x20000090
 8003250:	20000094 	.word	0x20000094

08003254 <_realloc_r>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	4607      	mov	r7, r0
 8003258:	4614      	mov	r4, r2
 800325a:	460e      	mov	r6, r1
 800325c:	b921      	cbnz	r1, 8003268 <_realloc_r+0x14>
 800325e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003262:	4611      	mov	r1, r2
 8003264:	f7ff bf9c 	b.w	80031a0 <_malloc_r>
 8003268:	b922      	cbnz	r2, 8003274 <_realloc_r+0x20>
 800326a:	f7ff ff49 	bl	8003100 <_free_r>
 800326e:	4625      	mov	r5, r4
 8003270:	4628      	mov	r0, r5
 8003272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003274:	f000 f830 	bl	80032d8 <_malloc_usable_size_r>
 8003278:	42a0      	cmp	r0, r4
 800327a:	d20f      	bcs.n	800329c <_realloc_r+0x48>
 800327c:	4621      	mov	r1, r4
 800327e:	4638      	mov	r0, r7
 8003280:	f7ff ff8e 	bl	80031a0 <_malloc_r>
 8003284:	4605      	mov	r5, r0
 8003286:	2800      	cmp	r0, #0
 8003288:	d0f2      	beq.n	8003270 <_realloc_r+0x1c>
 800328a:	4631      	mov	r1, r6
 800328c:	4622      	mov	r2, r4
 800328e:	f7ff ff0f 	bl	80030b0 <memcpy>
 8003292:	4631      	mov	r1, r6
 8003294:	4638      	mov	r0, r7
 8003296:	f7ff ff33 	bl	8003100 <_free_r>
 800329a:	e7e9      	b.n	8003270 <_realloc_r+0x1c>
 800329c:	4635      	mov	r5, r6
 800329e:	e7e7      	b.n	8003270 <_realloc_r+0x1c>

080032a0 <_sbrk_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4d06      	ldr	r5, [pc, #24]	; (80032bc <_sbrk_r+0x1c>)
 80032a4:	2300      	movs	r3, #0
 80032a6:	4604      	mov	r4, r0
 80032a8:	4608      	mov	r0, r1
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	f7fd fc84 	bl	8000bb8 <_sbrk>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_sbrk_r+0x1a>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_sbrk_r+0x1a>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	20000530 	.word	0x20000530

080032c0 <__malloc_lock>:
 80032c0:	4801      	ldr	r0, [pc, #4]	; (80032c8 <__malloc_lock+0x8>)
 80032c2:	f000 b811 	b.w	80032e8 <__retarget_lock_acquire_recursive>
 80032c6:	bf00      	nop
 80032c8:	20000538 	.word	0x20000538

080032cc <__malloc_unlock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	; (80032d4 <__malloc_unlock+0x8>)
 80032ce:	f000 b80c 	b.w	80032ea <__retarget_lock_release_recursive>
 80032d2:	bf00      	nop
 80032d4:	20000538 	.word	0x20000538

080032d8 <_malloc_usable_size_r>:
 80032d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032dc:	1f18      	subs	r0, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bfbc      	itt	lt
 80032e2:	580b      	ldrlt	r3, [r1, r0]
 80032e4:	18c0      	addlt	r0, r0, r3
 80032e6:	4770      	bx	lr

080032e8 <__retarget_lock_acquire_recursive>:
 80032e8:	4770      	bx	lr

080032ea <__retarget_lock_release_recursive>:
 80032ea:	4770      	bx	lr

080032ec <_init>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr

080032f8 <_fini>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	bf00      	nop
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr
