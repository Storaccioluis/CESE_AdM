

							Arquitectura de microcontroladores

1. Los microcontroladores de ARM se dividen en 3 familias :
Cortex A: optimizado para aplicaciones donde la característica principal es la capacidad de multitareas, con un caché optimizado para las aplicaciones. La desventaja de esta optimización lo hace un sistema poco determinista.
Cortex R: Procesadores diseñados para APIs de real time. Donde se hace foco en el tiempo de latencia para poder desarrollar aplicaciones deterministas.
Cortex M: microcontroladores orientados a sistemas embebidos, los cuales poseen perdiféricos y memoria integrada. 

	Cortex M

1.Diferencias entre las familias de procesadores M0, M3 y M4:
   * M0: Arquitectura del bus de datos del tipo Von Neumann (1 solo bus), comparte el mismo bus el programa de instrucciones y el acceso a memoria. Posee un set de intrucciones resumido. 
   * M3: Arquitectura del bus del tipo Harvard (2 buses), instrucciones de multiplicación con resultados de 64bits e instrucciones de divisiones con cociente de 32bits. Posee Systick, timer recurrente para implementaciones de RTOS.  
   * M4: Arquitectura del bus del tipo Harvard (2 buses), instrucciones de multiplicación con resultados de 64bits e instrucciones de divisiones con cociente de 32bits. Posee instrucciones para DSP, timer recurrente systick para implementaciones de RTOS.

2.Set de instrucciones Thumb:
  Trumb es un subconjunto de instrucciones que se usan con mayor frecuencia. Al ser las instrucciones de 16 bits, la mitad de longitud, se disminuye la cantidad de código por lo tanto su densidad. 

3.Arquitectura Load-Store
   Si un dato de la memoria debe ser procesado, el mismo es cargado desde la memoria hacia un registro y luego procesado. En caso de ser necesario, el dato puede ser escrito desde el registro hacia la memoria. No se trabajan con datos desde la memoria. ******

4.Mapa de memoria arquitectura ARM
  El mapa de memoria de la familia comprende 4GB de direcciones donde allí se encuentran mapeados los registros, código de programa, periféricos, memoria SRAM entre otros.

5.Ventajas del shadowed pointers del PSP y el MSP
  Los procesadores MCortex son diseñados para soportar compatibilidad con los sistemas operativos, el shadowed stack pointer es incorporado para hacer más eficiente el uso de estos sistemas. Consta de dos stacks, MSP (Main Stack Pointer) que es usado por el kernel del SO y el interrupt handler. Y el PSP (Processor Stack Pointer) es usado por las aplicaciones de las tareas.
 El MSP es por defecto el stack pointer y es usado en modo Thread cuando el bit SPSEL es 0, además es usado siempre en el modo handler. Por otra parte el PSP es usado en modo thread cuando el SPSEL es seteado en 1.

6.Modos de privilegio y operación del cortex M, sus relaciones y como se conmuta de un modo al otro
 CortexM posee dos modos de operación, privilegiado y no provilegiado. El privilegiado permite al usuario realizar modificaciones en registros o acceder a la memoria sin restricciones, lo cual puede ser riesgoso para aplicaciones críticas. En modo no privilegiado este acceso se encuentra restringido. 
Por defecto el micro controlador en al iniciar, arranca en modo privilegiado. Con la función "__get_CONTROL(x)" podemos saber si estamos en modo privilegiado o no, siendo x=0 para privilegiado y 1 para el no privilegiado. 
Con la función  "__set_CONTROL(x)" podemos pasar al modo no privilegiado haciendo x=1. Una vez en este modo, no podemos cambiar a modo privilegiado con la misma función, se debe accedeer a una interrupción en modo handler para volverlo a privilegiado. 

7.Registros ortogonales
 Un set de instrucciones son ortogonales si las mismas pueden tomar cualquier registro del microcontrolador. Por ejemplo, ADD Rd, Rn, Rm.

8. Las instrucciones de ejecución condicional (it) solo se ejecutan según el valor de los flags de estado N, Z, C y V. Ejemplo: 
	ittte lt
		movne r0,#0          @ then
		addne r0, r1         @ then
		andne r0, r2         @ then
		moveq r0,#0xFF       @ else


9.Excepciones más prioritarias
  Estas excepciones tienen prioridades fijas, siendo la mas prioritaria la de menor valor. Por ejemplo reset =-3, NMI=-2 y Hardfault=-1.
  Las demás poseen prioridades programables por el fabricante o por el programador. 
  Reset: es una excepción invocada en un arranque o en un reinicio en caliente. Cuando es invocada, las operaciones del procesador son detenidas en cualquier punto de la instrucción. Al reesteablecerse el reset, la ejecución se inicia desde la dirección proporcionada por reset entry. 
  
  NMI (Non-Maskable Interrupt): es una interrupción que puede provenir de periféricos o del software.
  
  Hardfault: es una interrupción que proviene del hardware, la misma tiene mayor prioridad que cualquier excepción con prioridad configurable. 


10. La funcion principal de la pila es almacenar en memoria los valores de los registros para salvaguardarlos y poder ejecutar una funcion sin perder dichos valores. Al llamar a una función, la arquitectura guarda los valores del Stack Ponter (SP), link Register(LR), program counter (PC) y Program status register. La funciones reciben en los registros r0-r4 los parámetros de la misma y devuelve en r0-r1 el resultado.

11.Secuencia reset del microprocesador
    Existen tres tipos de reset: 
					* Power on reset: se resetea todo el microcontrolador, incluye procesador, componentes de soporte del debug y periféricos.
				 	* System reset: resetea solo el procesador y los periféricos.
					* Processor reset: resetea solo el procesador.
Al producirse un reset, la primera acción es obtener el valor inicial del MSP, luego los valores del vector de reset y la primera instruccion indicada en el vector del reset.

13. Las prioridades de las interrupciones están definidas por el número de interrupción CMSIS, en donde la máxima prioridad es el número más bajo. El fabricante define desde 0-239 IRQs seteables.

14. CMSIS (The Common Microcontroller Software Interface Standard) es una  interfáz estandar de software para microcontroladores. Es una capa de abstracción idependiente del proveedor para microcontroladores con procesadores ARM cortex. Define interfaces de herramientas genéricas y permite un consistente soporte del dispositivo. CMSIS simplifica la reutilización del soft.

15.

17. El systick es un timer externo al core que genera una interrupción en forma periódica. Independientemente del fabricante del microcontrolador, ARM provee además del core, el Systick como bloque de temporización para la utilización del mismo en los SO. Esto permite la portabilidad de los SO para las diferentes familias que posean el systick.



#######################_ISA_##############################
1. ISA (Instruction Set Arquitecture) en cortex-M es llamado Thumb ISA y es basado en Thumb-2 que soporta instrucciones de 16 y 32 bits.

2. El sufijo 's se utiliza para que una instrucción active o no los flags de estado.

   Por ejemplo:   subs r2,1                 @ realiza la resta del valor del registro r2-1
                  bne .asm_pack32to16_for   @ realiza un branch en caso de que la resta anterior no sea igual a cero por la activación del flag Z

3. La utilidad de la implementación de las instrucciones de aritmética saturada es conservar el valor de saturación en caso de desbordamiento. De esta forma se puede saber si la operación con Nbits resultó desbordada o no. Se utiliza comunmente en procesamiento de señales. Ejemplo:

  	SSAT <Rd>, #<immed>, <Rn>, {,<shift>} @ Saturation for signed value
	USAT <Rd>, #<immed>, <Rn>, {,<shift>} @ Saturation for a signed
        
        move r0,1       @
        add r0,256      @         
        USAT R1, #8, R0 @   R1= 0x00FF

4.Un ensamblador toma un código generado en lenguaje C y lo traduce en asm para almacenarlo en la memoria mediante un linker script.
Las funciones en assembler reciben los argumentos en los registros r0-r4 y devuelve los resultados en los registros r0 y r1. Los demás registros de propósito general utilizados en el código deben guardarse en la pila previo a su utilización mediante la isntrucción push { rx---rz }. Al finalizar las instrucciones de la función, previo al salto al programa, se debe reestablecer los valores de los registros mediante pop { rx---rz }.

5. SIMD(Single Instruction, Multiple Data) es una instrucción que realiza multiples datos. Se aplica en los casos en donde se quiera realizar una misma operación en registros de 32 bits con datos de 16 u 8 bits en una sola instrucción.
Por ejemplo sumar datos de a pares de 8 bits.
           ADD8 r0,r1    @ suma 4 pares de 8 bits de datos.
           ADD16 r0,r1   @ suma 2 pares de 16 bits de datos.

